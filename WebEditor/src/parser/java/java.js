/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var java = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[5,9],$V1=[13,41,42,43],$V2=[2,8],$V3=[1,19],$V4=[1,20],$V5=[1,21],$V6=[1,25],$V7=[1,26],$V8=[1,27],$V9=[1,28],$Va=[1,29],$Vb=[1,30],$Vc=[1,31],$Vd=[10,31,32,33,34,35,36,37],$Ve=[1,39],$Vf=[26,30],$Vg=[2,31],$Vh=[1,41],$Vi=[2,15],$Vj=[1,47],$Vk=[1,65],$Vl=[1,66],$Vm=[1,67],$Vn=[1,68],$Vo=[1,56],$Vp=[1,58],$Vq=[1,60],$Vr=[1,61],$Vs=[1,62],$Vt=[1,63],$Vu=[1,64],$Vv=[22,26],$Vw=[1,74],$Vx=[22,26,30,78,87],$Vy=[1,75],$Vz=[22,26,30,78,87,89],$VA=[1,76],$VB=[1,77],$VC=[1,78],$VD=[1,79],$VE=[1,80],$VF=[1,81],$VG=[22,26,30,78,87,89,91,93,94,95,96,97],$VH=[1,82],$VI=[1,83],$VJ=[22,26,30,78,87,89,91,93,94,95,96,97,98,100],$VK=[1,84],$VL=[1,85],$VM=[1,86],$VN=[22,26,30,78,87,89,91,93,94,95,96,97,98,100,101,103,104],$VO=[22,26,30,78,87,89,91,93,94,95,96,97,98,100,101,103,104,106],$VP=[1,90],$VQ=[2,88],$VR=[10,13,31,32,33,34,35,36,37,47,49,65,68,70,71,72,80,82,83,84,85],$VS=[2,42],$VT=[1,120],$VU=[1,121],$VV=[1,122],$VW=[1,151],$VX=[1,152],$VY=[1,150],$VZ=[1,154],$V_=[1,143],$V$=[1,144],$V01=[1,145],$V11=[1,146],$V21=[1,140],$V31=[1,141],$V41=[1,147],$V51=[1,148],$V61=[1,149],$V71=[10,13,31,32,33,34,35,36,37,47,49,65,68,70,71,72,77,79,80,82,83,84,85],$V81=[1,167],$V91=[1,178],$Va1=[1,185],$Vb1=[1,186],$Vc1=[1,187],$Vd1=[10,13,31,32,33,34,35,36,37,47,49,65,66,68,70,71,72,77,79,80,82,83,84,85],$Ve1=[1,218],$Vf1=[22,26,30],$Vg1=[1,219],$Vh1=[1,246],$Vi1=[1,245],$Vj1=[13,77,79];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"initial":3,"java":4,"EOF":5,"JAVA":6,"list_of_classes":7,"class":8,"CLASS":9,"ID":10,"LBRACE":11,"items_class":12,"RBRACE":13,"EXTENDS":14,"class_opt":15,"statement_class":16,"construct":17,"function":18,"access":19,"LPAREN":20,"list_params":21,"RPAREN":22,"function_body":23,"type":24,"params":25,"COMMA":26,"param":27,"statement":28,"list_opt":29,"SEMI":30,"CHARACTER":31,"STR":32,"INT":33,"DOUBLE":34,"FLOAT":35,"BOOLEAN":36,"VOID":37,"option":38,"EQUAL":39,"a":40,"PRIVATE":41,"PROTECTED":42,"PUBLIC":43,"assigment":44,"list_assign":45,"assign":46,"THIS":47,"DOT":48,"SUPER":49,"func_body":50,"print_":51,"list_if":52,"for_":53,"while_":54,"do_while_":55,"switch_":56,"break_":57,"continue_":58,"return_":59,"super_":60,"function_call":61,"if_":62,"else_":63,"list_else_if":64,"IF":65,"ELSE":66,"else_if":67,"FOR":68,"for_assign":69,"WHILE":70,"DO":71,"SWITCH":72,"switch_opt":73,"list_case":74,"default_":75,"case_":76,"CASE":77,"COLON":78,"DEFAULT":79,"PRINT":80,"list_op":81,"PRINTLN":82,"BREAK":83,"CONTINUE":84,"RETURN":85,"args_":86,"OR":87,"b":88,"AND":89,"c":90,"EQEQ":91,"d":92,"NEQ":93,"GREATER":94,"GREATER_EQ":95,"SMALLER":96,"SMALLER_EQ":97,"PLUS":98,"e":99,"MINUS":100,"TIMES":101,"f":102,"DIVIDE":103,"MOD":104,"g":105,"POW":106,"h":107,"NOT":108,"i":109,"INTEGER":110,"DECIMAL":111,"STRING":112,"CHAR":113,"BOOL":114,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"JAVA",9:"CLASS",10:"ID",11:"LBRACE",13:"RBRACE",14:"EXTENDS",20:"LPAREN",22:"RPAREN",26:"COMMA",30:"SEMI",31:"CHARACTER",32:"STR",33:"INT",34:"DOUBLE",35:"FLOAT",36:"BOOLEAN",37:"VOID",39:"EQUAL",41:"PRIVATE",42:"PROTECTED",43:"PUBLIC",47:"THIS",48:"DOT",49:"SUPER",65:"IF",66:"ELSE",68:"FOR",70:"WHILE",71:"DO",72:"SWITCH",77:"CASE",78:"COLON",79:"DEFAULT",80:"PRINT",82:"PRINTLN",83:"BREAK",84:"CONTINUE",85:"RETURN",87:"OR",89:"AND",91:"EQEQ",93:"NEQ",94:"GREATER",95:"GREATER_EQ",96:"SMALLER",97:"SMALLER_EQ",98:"PLUS",100:"MINUS",101:"TIMES",103:"DIVIDE",104:"MOD",106:"POW",108:"NOT",110:"INTEGER",111:"DECIMAL",112:"STRING",113:"CHAR",114:"BOOL"},
productions_: [0,[3,2],[4,2],[7,2],[7,0],[8,5],[8,7],[12,2],[12,0],[15,1],[15,1],[15,1],[17,8],[18,9],[21,1],[21,0],[25,3],[25,1],[27,2],[28,3],[16,4],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[29,3],[29,1],[38,3],[38,1],[19,1],[19,1],[19,1],[44,2],[45,3],[45,1],[46,3],[46,5],[46,5],[23,2],[23,0],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,2],[52,1],[52,2],[52,2],[52,3],[62,7],[63,4],[64,2],[64,1],[67,8],[53,11],[69,4],[69,1],[54,7],[55,9],[56,7],[73,1],[73,2],[73,1],[73,0],[74,2],[74,1],[76,4],[75,3],[51,5],[51,5],[81,3],[81,1],[57,2],[58,2],[59,3],[60,5],[86,1],[86,0],[61,4],[61,6],[61,6],[40,3],[40,1],[88,3],[88,1],[90,3],[90,3],[90,3],[90,3],[90,3],[90,3],[90,1],[92,3],[92,3],[92,1],[99,3],[99,3],[99,3],[99,1],[102,3],[102,1],[105,2],[105,1],[107,2],[107,1],[109,1],[109,1],[109,1],[109,1],[109,1],[109,1],[109,3],[109,3],[109,3],[109,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return true; 
break;
}
},
table: [{3:1,4:2,6:[1,3]},{1:[3]},{5:[1,4]},o($V0,[2,4],{7:5}),{1:[2,1]},{5:[2,2],8:6,9:[1,7]},o($V0,[2,3]),{10:[1,8]},{11:[1,9],14:[1,10]},o($V1,$V2,{12:11}),{10:[1,12]},{13:[1,13],15:14,16:15,17:16,18:17,19:18,41:$V3,42:$V4,43:$V5},{11:[1,22]},o($V0,[2,5]),o($V1,[2,7]),o($V1,[2,9]),o($V1,[2,10]),o($V1,[2,11]),{10:[1,24],24:23,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,36:$Vb,37:$Vc},o($Vd,[2,32]),o($Vd,[2,33]),o($Vd,[2,34]),o($V1,$V2,{12:32}),{10:[1,34],29:33,38:35},{20:[1,36]},{10:[2,21]},{10:[2,22]},{10:[2,23]},{10:[2,24]},{10:[2,25]},{10:[2,26]},{10:[2,27]},{13:[1,37],15:14,16:15,17:16,18:17,19:18,41:$V3,42:$V4,43:$V5},{26:$Ve,30:[1,38]},o($Vf,$Vg,{20:[1,40],39:$Vh}),o($Vf,[2,29]),{21:42,22:$Vi,24:45,25:43,27:44,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,36:$Vb,37:$Vc},o($V0,[2,6]),o($V1,[2,20]),{10:$Vj,38:46},{21:48,22:$Vi,24:45,25:43,27:44,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,36:$Vb,37:$Vc},{10:$Vk,20:$Vl,40:49,47:$Vm,49:$Vn,61:69,88:50,90:51,92:52,99:53,100:$Vo,102:54,105:55,107:57,108:$Vp,109:59,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu},{22:[1,70]},{22:[2,14],26:[1,71]},o($Vv,[2,17]),{10:[1,72]},o($Vf,[2,28]),o($Vf,$Vg,{39:$Vh}),{22:[1,73]},o($Vf,[2,30],{87:$Vw}),o($Vx,[2,93],{89:$Vy}),o($Vz,[2,95],{91:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF}),o($VG,[2,102],{98:$VH,100:$VI}),o($VJ,[2,105],{101:$VK,103:$VL,104:$VM}),o($VN,[2,109]),o($VN,[2,111],{106:[1,87]}),{10:$Vk,20:$Vl,47:$Vm,49:$Vn,61:69,107:88,108:$Vp,109:59,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu},o($VO,[2,113]),{10:$Vk,20:$Vl,47:$Vm,49:$Vn,61:69,107:89,108:$Vp,109:59,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu},o($VO,[2,115]),o($VO,[2,116]),o($VO,[2,117]),o($VO,[2,118]),o($VO,[2,119]),o($VO,[2,120]),o($VO,[2,121],{20:$VP}),{10:$Vk,20:$Vl,40:91,47:$Vm,49:$Vn,61:69,88:50,90:51,92:52,99:53,100:$Vo,102:54,105:55,107:57,108:$Vp,109:59,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu},{48:[1,92]},{48:[1,93]},o($VO,[2,125]),{11:[1,94]},{24:45,27:95,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,36:$Vb,37:$Vc},o($Vv,[2,18]),{11:[1,96]},{10:$Vk,20:$Vl,47:$Vm,49:$Vn,61:69,88:97,90:51,92:52,99:53,100:$Vo,102:54,105:55,107:57,108:$Vp,109:59,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu},{10:$Vk,20:$Vl,47:$Vm,49:$Vn,61:69,90:98,92:52,99:53,100:$Vo,102:54,105:55,107:57,108:$Vp,109:59,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu},{10:$Vk,20:$Vl,47:$Vm,49:$Vn,61:69,92:99,99:53,100:$Vo,102:54,105:55,107:57,108:$Vp,109:59,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu},{10:$Vk,20:$Vl,47:$Vm,49:$Vn,61:69,92:100,99:53,100:$Vo,102:54,105:55,107:57,108:$Vp,109:59,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu},{10:$Vk,20:$Vl,47:$Vm,49:$Vn,61:69,92:101,99:53,100:$Vo,102:54,105:55,107:57,108:$Vp,109:59,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu},{10:$Vk,20:$Vl,47:$Vm,49:$Vn,61:69,92:102,99:53,100:$Vo,102:54,105:55,107:57,108:$Vp,109:59,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu},{10:$Vk,20:$Vl,47:$Vm,49:$Vn,61:69,92:103,99:53,100:$Vo,102:54,105:55,107:57,108:$Vp,109:59,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu},{10:$Vk,20:$Vl,47:$Vm,49:$Vn,61:69,92:104,99:53,100:$Vo,102:54,105:55,107:57,108:$Vp,109:59,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu},{10:$Vk,20:$Vl,47:$Vm,49:$Vn,61:69,99:105,100:$Vo,102:54,105:55,107:57,108:$Vp,109:59,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu},{10:$Vk,20:$Vl,47:$Vm,49:$Vn,61:69,99:106,100:$Vo,102:54,105:55,107:57,108:$Vp,109:59,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu},{10:$Vk,20:$Vl,47:$Vm,49:$Vn,61:69,100:$Vo,102:107,105:55,107:57,108:$Vp,109:59,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu},{10:$Vk,20:$Vl,47:$Vm,49:$Vn,61:69,100:$Vo,102:108,105:55,107:57,108:$Vp,109:59,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu},{10:$Vk,20:$Vl,47:$Vm,49:$Vn,61:69,100:$Vo,102:109,105:55,107:57,108:$Vp,109:59,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu},{10:$Vk,20:$Vl,47:$Vm,49:$Vn,61:69,100:$Vo,102:110,105:55,107:57,108:$Vp,109:59,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu},o($VO,[2,112]),o($VO,[2,114]),{10:$Vk,20:$Vl,22:$VQ,40:113,47:$Vm,49:$Vn,61:69,81:112,86:111,88:50,90:51,92:52,99:53,100:$Vo,102:54,105:55,107:57,108:$Vp,109:59,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu},{22:[1,114],87:$Vw},{10:[1,115]},{10:[1,116]},o($VR,$VS,{23:117}),o($Vv,[2,16]),o($VR,$VS,{23:118}),o($Vx,[2,92],{89:$Vy}),o($Vz,[2,94],{91:$VA,93:$VB,94:$VC,95:$VD,96:$VE,97:$VF}),o($VG,[2,96],{98:$VH,100:$VI}),o($VG,[2,97],{98:$VH,100:$VI}),o($VG,[2,98],{98:$VH,100:$VI}),o($VG,[2,99],{98:$VH,100:$VI}),o($VG,[2,100],{98:$VH,100:$VI}),o($VG,[2,101],{98:$VH,100:$VI}),o($VJ,[2,103],{101:$VK,103:$VL,104:$VM}),o($VJ,[2,104],{101:$VK,103:$VL,104:$VM}),o($VN,[2,106]),o($VN,[2,107]),o($VN,[2,108]),o($VN,[2,110]),{22:[1,119]},{22:[2,87],26:$VT},o($Vv,[2,82],{87:$Vw}),o($VO,[2,122]),o($VO,[2,123],{20:$VU}),o($VO,[2,124],{20:$VV}),{10:$VW,13:[1,123],24:138,28:125,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,36:$Vb,37:$Vc,44:126,45:139,46:153,47:$VX,49:$VY,50:124,51:127,52:128,53:129,54:130,55:131,56:132,57:133,58:134,59:135,60:136,61:137,62:142,65:$VZ,68:$V_,70:$V$,71:$V01,72:$V11,80:$V21,82:$V31,83:$V41,84:$V51,85:$V61},{10:$VW,13:[1,155],24:138,28:125,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,36:$Vb,37:$Vc,44:126,45:139,46:153,47:$VX,49:$VY,50:124,51:127,52:128,53:129,54:130,55:131,56:132,57:133,58:134,59:135,60:136,61:137,62:142,65:$VZ,68:$V_,70:$V$,71:$V01,72:$V11,80:$V21,82:$V31,83:$V41,84:$V51,85:$V61},o($VO,[2,89]),{10:$Vk,20:$Vl,40:156,47:$Vm,49:$Vn,61:69,88:50,90:51,92:52,99:53,100:$Vo,102:54,105:55,107:57,108:$Vp,109:59,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu},{10:$Vk,20:$Vl,22:$VQ,40:113,47:$Vm,49:$Vn,61:69,81:112,86:157,88:50,90:51,92:52,99:53,100:$Vo,102:54,105:55,107:57,108:$Vp,109:59,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu},{10:$Vk,20:$Vl,22:$VQ,40:113,47:$Vm,49:$Vn,61:69,81:112,86:158,88:50,90:51,92:52,99:53,100:$Vo,102:54,105:55,107:57,108:$Vp,109:59,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu},o($V1,[2,12]),o($V71,[2,41]),o($V71,[2,43]),o($V71,[2,44]),o($V71,[2,45]),o($V71,[2,46]),o($V71,[2,47]),o($V71,[2,48]),o($V71,[2,49]),o($V71,[2,50]),o($V71,[2,51]),o($V71,[2,52]),o($V71,[2,53]),o($V71,[2,54]),{30:[1,159]},{10:$Vj,29:160,38:35},{26:[1,162],30:[1,161]},{20:[1,163]},{20:[1,164]},o($V71,[2,56],{63:165,64:166,67:168,66:$V81}),{20:[1,169]},{20:[1,170]},{11:[1,171]},{20:[1,172]},{30:[1,173]},{30:[1,174]},{10:$Vk,20:$Vl,40:175,47:$Vm,49:$Vn,61:69,88:50,90:51,92:52,99:53,100:$Vo,102:54,105:55,107:57,108:$Vp,109:59,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu},{20:[1,176],48:[1,177]},{20:$VP,39:$V91},{48:[1,179]},o($Vf,[2,37]),{20:[1,180]},o($V1,[2,13]),o($Vv,[2,81],{87:$Vw}),{22:[1,181]},{22:[1,182]},o($V71,[2,55]),{26:$Ve,30:[1,183]},o($V71,[2,35]),{10:$Va1,46:184,47:$Vb1,49:$Vc1},{10:$Vk,20:$Vl,40:113,47:$Vm,49:$Vn,61:69,81:188,88:50,90:51,92:52,99:53,100:$Vo,102:54,105:55,107:57,108:$Vp,109:59,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu},{10:$Vk,20:$Vl,40:113,47:$Vm,49:$Vn,61:69,81:189,88:50,90:51,92:52,99:53,100:$Vo,102:54,105:55,107:57,108:$Vp,109:59,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu},o($V71,[2,57]),o($V71,[2,58],{63:190,67:191,66:$V81}),{11:[1,192],65:[1,193]},o($Vd1,[2,63]),{10:$Va1,33:[1,195],46:196,47:$Vb1,49:$Vc1,69:194},{10:$Vk,20:$Vl,40:197,47:$Vm,49:$Vn,61:69,88:50,90:51,92:52,99:53,100:$Vo,102:54,105:55,107:57,108:$Vp,109:59,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu},o($VR,$VS,{23:198}),{10:$Vk,20:$Vl,40:199,47:$Vm,49:$Vn,61:69,88:50,90:51,92:52,99:53,100:$Vo,102:54,105:55,107:57,108:$Vp,109:59,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu},o($V71,[2,83]),o($V71,[2,84]),{30:[1,200],87:$Vw},{10:$Vk,20:$Vl,22:$VQ,40:113,47:$Vm,49:$Vn,61:69,81:112,86:201,88:50,90:51,92:52,99:53,100:$Vo,102:54,105:55,107:57,108:$Vp,109:59,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu},{10:[1,202]},{10:$Vk,20:$Vl,40:203,47:$Vm,49:$Vn,61:69,88:50,90:51,92:52,99:53,100:$Vo,102:54,105:55,107:57,108:$Vp,109:59,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu},{10:[1,204]},{10:$Vk,20:$Vl,40:205,47:$Vm,49:$Vn,61:69,88:50,90:51,92:52,99:53,100:$Vo,102:54,105:55,107:57,108:$Vp,109:59,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu},o($VO,[2,90]),o($VO,[2,91]),o($V71,[2,19]),o($Vf,[2,36]),{39:$V91},{48:[1,206]},{48:[1,207]},{22:[1,208],26:$VT},{22:[1,209],26:$VT},o($V71,[2,59]),o($Vd1,[2,62]),o($VR,$VS,{23:210}),{20:[1,211]},{30:[1,212]},{10:[1,213]},{30:[2,67]},{22:[1,214],87:$Vw},{10:$VW,13:[1,215],24:138,28:125,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,36:$Vb,37:$Vc,44:126,45:139,46:153,47:$VX,49:$VY,50:124,51:127,52:128,53:129,54:130,55:131,56:132,57:133,58:134,59:135,60:136,61:137,62:142,65:$VZ,68:$V_,70:$V$,71:$V01,72:$V11,80:$V21,82:$V31,83:$V41,84:$V51,85:$V61},{22:[1,216],87:$Vw},o($V71,[2,85]),{22:[1,217]},{20:$VV,39:$Ve1},o($Vf1,[2,38],{87:$Vw}),{20:$VU,39:$Vg1},{22:[1,220],87:$Vw},{10:[1,221]},{10:[1,222]},{30:[1,223]},{30:[1,224]},{10:$VW,13:[1,225],24:138,28:125,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,36:$Vb,37:$Vc,44:126,45:139,46:153,47:$VX,49:$VY,50:124,51:127,52:128,53:129,54:130,55:131,56:132,57:133,58:134,59:135,60:136,61:137,62:142,65:$VZ,68:$V_,70:$V$,71:$V01,72:$V11,80:$V21,82:$V31,83:$V41,84:$V51,85:$V61},{10:$Vk,20:$Vl,40:226,47:$Vm,49:$Vn,61:69,88:50,90:51,92:52,99:53,100:$Vo,102:54,105:55,107:57,108:$Vp,109:59,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu},{10:$Vk,20:$Vl,40:227,47:$Vm,49:$Vn,61:69,88:50,90:51,92:52,99:53,100:$Vo,102:54,105:55,107:57,108:$Vp,109:59,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu},{39:[1,228]},{11:[1,229]},{70:[1,230]},{11:[1,231]},{30:[1,232]},{10:$Vk,20:$Vl,40:233,47:$Vm,49:$Vn,61:69,88:50,90:51,92:52,99:53,100:$Vo,102:54,105:55,107:57,108:$Vp,109:59,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu},{10:$Vk,20:$Vl,40:234,47:$Vm,49:$Vn,61:69,88:50,90:51,92:52,99:53,100:$Vo,102:54,105:55,107:57,108:$Vp,109:59,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu},{11:[1,235]},{39:$Vg1},{39:$Ve1},o($V71,[2,79]),o($V71,[2,80]),o($V71,[2,61]),{22:[1,236],87:$Vw},{30:[1,237],87:$Vw},{10:$Vk,20:$Vl,40:238,47:$Vm,49:$Vn,61:69,88:50,90:51,92:52,99:53,100:$Vo,102:54,105:55,107:57,108:$Vp,109:59,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu},o($VR,$VS,{23:239}),{20:[1,240]},{13:[2,74],73:241,74:242,75:243,76:244,77:$Vh1,79:$Vi1},o($V71,[2,86]),o($Vf1,[2,40],{87:$Vw}),o($Vf1,[2,39],{87:$Vw}),o($VR,$VS,{23:247}),{11:[1,248]},{10:$Va1,46:249,47:$Vb1,49:$Vc1},{30:[2,66],87:$Vw},{10:$VW,13:[1,250],24:138,28:125,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,36:$Vb,37:$Vc,44:126,45:139,46:153,47:$VX,49:$VY,50:124,51:127,52:128,53:129,54:130,55:131,56:132,57:133,58:134,59:135,60:136,61:137,62:142,65:$VZ,68:$V_,70:$V$,71:$V01,72:$V11,80:$V21,82:$V31,83:$V41,84:$V51,85:$V61},{10:$Vk,20:$Vl,40:251,47:$Vm,49:$Vn,61:69,88:50,90:51,92:52,99:53,100:$Vo,102:54,105:55,107:57,108:$Vp,109:59,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu},{13:[1,252]},{13:[2,71],75:253,76:254,77:$Vh1,79:$Vi1},{13:[2,73]},o($Vj1,[2,76]),{78:[1,255]},{10:$Vk,20:$Vl,40:256,47:$Vm,49:$Vn,61:69,88:50,90:51,92:52,99:53,100:$Vo,102:54,105:55,107:57,108:$Vp,109:59,110:$Vq,111:$Vr,112:$Vs,113:$Vt,114:$Vu},{10:$VW,13:[1,257],24:138,28:125,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,36:$Vb,37:$Vc,44:126,45:139,46:153,47:$VX,49:$VY,50:124,51:127,52:128,53:129,54:130,55:131,56:132,57:133,58:134,59:135,60:136,61:137,62:142,65:$VZ,68:$V_,70:$V$,71:$V01,72:$V11,80:$V21,82:$V31,83:$V41,84:$V51,85:$V61},o($VR,$VS,{23:258}),{22:[1,259]},o($V71,[2,68]),{22:[1,260],87:$Vw},o($V71,[2,70]),{13:[2,72]},o($Vj1,[2,75]),o($VR,$VS,{23:261}),{78:[1,262],87:$Vw},o($Vd1,[2,60]),{10:$VW,13:[1,263],24:138,28:125,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,36:$Vb,37:$Vc,44:126,45:139,46:153,47:$VX,49:$VY,50:124,51:127,52:128,53:129,54:130,55:131,56:132,57:133,58:134,59:135,60:136,61:137,62:142,65:$VZ,68:$V_,70:$V$,71:$V01,72:$V11,80:$V21,82:$V31,83:$V41,84:$V51,85:$V61},{11:[1,264]},{30:[1,265]},{10:$VW,13:[2,78],24:138,28:125,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,36:$Vb,37:$Vc,44:126,45:139,46:153,47:$VX,49:$VY,50:124,51:127,52:128,53:129,54:130,55:131,56:132,57:133,58:134,59:135,60:136,61:137,62:142,65:$VZ,68:$V_,70:$V$,71:$V01,72:$V11,80:$V21,82:$V31,83:$V41,84:$V51,85:$V61},o($V71,$VS,{23:266}),o($Vd1,[2,64]),o($VR,$VS,{23:267}),o($V71,[2,69]),o($Vj1,[2,77],{50:124,28:125,44:126,51:127,52:128,53:129,54:130,55:131,56:132,57:133,58:134,59:135,60:136,61:137,24:138,45:139,62:142,46:153,10:$VW,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,36:$Vb,37:$Vc,47:$VX,49:$VY,65:$VZ,68:$V_,70:$V$,71:$V01,72:$V11,80:$V21,82:$V31,83:$V41,84:$V51,85:$V61}),{10:$VW,13:[1,268],24:138,28:125,31:$V6,32:$V7,33:$V8,34:$V9,35:$Va,36:$Vb,37:$Vc,44:126,45:139,46:153,47:$VX,49:$VY,50:124,51:127,52:128,53:129,54:130,55:131,56:132,57:133,58:134,59:135,60:136,61:137,62:142,65:$VZ,68:$V_,70:$V$,71:$V01,72:$V11,80:$V21,82:$V31,83:$V41,84:$V51,85:$V61},o($V71,[2,65])],
defaultActions: {4:[2,1],25:[2,21],26:[2,22],27:[2,23],28:[2,24],29:[2,25],30:[2,26],31:[2,27],196:[2,67],243:[2,73],253:[2,72]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	let string = "";
	let char = "";
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return "JAVA";
break;
case 1:return "BOOLEAN";
break;
case 2:return "BREAK";
break;
case 3:return "CASE";
break;
case 4:return "CHARACTER";
break;
case 5:return "CLASS";
break;
case 6:return "CONTINUE";
break;
case 7:return "DEFAULT";
break;
case 8:return "DO";
break;
case 9:return "DOUBLE";
break;
case 10:return "ELSE";
break;
case 11:return "EXTENDS";
break;
case 12:return "FLOAT";
break;
case 13:return "FOR";
break;
case 14:return "IF";
break;
case 15:return "INT";
break;
case 16:return "PRINT";
break;
case 17:return "PRINTLN";
break;
case 18:return "PRIVATE";
break;
case 19:return "PROTECTED";
break;
case 20:return "PUBLIC";
break;
case 21:return "RETURN";
break;
case 22:return "SUPER";
break;
case 23:return "STR";
break;
case 24:return "SWITCH";
break;
case 25:return "THIS";
break;
case 26:return "VOID";
break;
case 27:return "BOOL";
break;
case 28:return "BOOL";
break;
case 29:return "WHILE";
break;
case 30:return "PLUS";
break;
case 31:return "MINUS";
break;
case 32:return "TIMES";
break;
case 33:return "POW";
break;
case 34:return "MOD";
break;
case 35:return "LPAREN";
break;
case 36:return "RPAREN";
break;
case 37:return "LBRACE";
break;
case 38:return "RBRACE";
break;
case 39:return "COLON";
break;
case 40:return "SEMI";
break;
case 41:return "COMMA";
break;
case 42:return "DOT";
break;
case 43:return "EQEQ";
break;
case 44:return "EQUAL";
break;
case 45:return "NEQ";
break;
case 46:return "GREATER_EQ";
break;
case 47:return "SMALLER_EQ";
break;
case 48:return "GREATER";
break;
case 49:return "SMALLER";
break;
case 50:return "AND";
break;
case 51:return "OR";
break;
case 52:return "NOT";
break;
case 53:return "INTEGER";
break;
case 54:return "DECIMAL";
break;
case 55:return "ID";
break;
case 56:/* ignore */
break;
case 57:/* ignore */
break;
case 58:return "DIVIDE";
break;
case 59:
									string = "";
									this.pushState("STRING");
								
break;
case 60:
									char = "";
									this.pushState("CHAR");
								
break;
case 61:return "EOF";
break;
case 62:
									console.log(`Error lexico: ${yy_.yytext}`);
									return "INVALID";
								
break;
case 63:
									yy_.yytext = string;
									this.popState();
									return "STRING";
								
break;
case 64:string += yy_.yytext;
break;
case 65:string += "\t";
break;
case 66:string += "\n";
break;
case 67:string += "\"";
break;
case 68:string += "\\";
break;
case 69:
									yy_.yytext = char;
									this.popState();
									return "CHAR";
								
break;
case 70:char += yy_.yytext;
break;
case 71:char += "\t";
break;
case 72:char += "\n";
break;
case 73:char += "\'";
break;
case 74:char += "\\";
break;
}
},
rules: [/^(?:(%%JAVA\b))/,/^(?:(boolean\b))/,/^(?:(break\b))/,/^(?:(case\b))/,/^(?:(char\b))/,/^(?:(class\b))/,/^(?:(continue\b))/,/^(?:(default\b))/,/^(?:(do\b))/,/^(?:(double\b))/,/^(?:(else\b))/,/^(?:(extends\b))/,/^(?:(float\b))/,/^(?:(for\b))/,/^(?:(if\b))/,/^(?:(int\b))/,/^(?:(print\b))/,/^(?:(println\b))/,/^(?:(private\b))/,/^(?:(protected\b))/,/^(?:(public\b))/,/^(?:(return\b))/,/^(?:(super\b))/,/^(?:(String\b))/,/^(?:(switch\b))/,/^(?:(this\b))/,/^(?:(void\b))/,/^(?:(false\b))/,/^(?:(true\b))/,/^(?:(while\b))/,/^(?:(\+))/,/^(?:(-))/,/^(?:(\*))/,/^(?:(\^))/,/^(?:(%))/,/^(?:(\())/,/^(?:(\)))/,/^(?:(\{))/,/^(?:(\}))/,/^(?:(:))/,/^(?:(;))/,/^(?:(,))/,/^(?:(\.))/,/^(?:(==))/,/^(?:(=))/,/^(?:(!=))/,/^(?:(>=))/,/^(?:(<=))/,/^(?:(>))/,/^(?:(<))/,/^(?:(&&))/,/^(?:(\|\|))/,/^(?:(!))/,/^(?:([1-9][0-9]+|[0-9]))/,/^(?:(([1-9][0-9]+|[0-9])\.[0-9]+))/,/^(?:([a-zA-Z_]\w*))/,/^(?:((\r|\n|\r\n)|[ \t\f]))/,/^(?:((\/\/[^\r\n]*)|(\/\*(([^*]|\*+[^/*])*)\*+\/)))/,/^(?:(\/))/,/^(?:(["]))/,/^(?:([']))/,/^(?:$)/,/^(?:.)/,/^(?:(["]))/,/^(?:[^\n\r\"\\]+)/,/^(?:\\t)/,/^(?:\\n)/,/^(?:\\")/,/^(?:\\)/,/^(?:([']))/,/^(?:[^\n\r\'\\]+)/,/^(?:\\t)/,/^(?:\\n)/,/^(?:\\')/,/^(?:\\)/],
conditions: {"CHAR":{"rules":[69,70,71,72,73,74],"inclusive":true},"STRING":{"rules":[63,64,65,66,67,68],"inclusive":true},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = java;
exports.Parser = java.Parser;
exports.parse = function () { return java.parse.apply(java, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var python = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,8],$V2=[5,8,10,25,32,35,37,39,41,47,49,50,51,54,55,83],$V3=[1,11],$V4=[10,47],$V5=[1,18],$V6=[1,20],$V7=[24,26,46,83],$V8=[2,42],$V9=[1,25],$Va=[1,46],$Vb=[1,47],$Vc=[1,48],$Vd=[1,42],$Ve=[1,43],$Vf=[1,41],$Vg=[1,44],$Vh=[1,45],$Vi=[10,25,32,39,41,49,50,51,54,55],$Vj=[1,60],$Vk=[1,62],$Vl=[1,80],$Vm=[1,81],$Vn=[1,72],$Vo=[1,74],$Vp=[1,76],$Vq=[1,77],$Vr=[1,78],$Vs=[1,79],$Vt=[10,25,32,35,37,39,41,49,50,51,54,55],$Vu=[1,93],$Vv=[24,33,46,56,83],$Vw=[1,94],$Vx=[24,33,46,56,58,83],$Vy=[1,95],$Vz=[1,96],$VA=[1,97],$VB=[1,98],$VC=[1,99],$VD=[1,100],$VE=[24,33,46,56,58,60,62,63,64,65,66,83],$VF=[1,101],$VG=[1,102],$VH=[24,33,46,56,58,60,62,63,64,65,66,67,69,83],$VI=[1,103],$VJ=[1,104],$VK=[1,105],$VL=[24,33,46,56,58,60,62,63,64,65,66,67,69,70,72,73,83],$VM=[24,33,46,56,58,60,62,63,64,65,66,67,69,70,72,73,75,83],$VN=[1,115],$VO=[24,46,83],$VP=[10,25,32,35,39,41,49,50,51,54,55];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"initial":3,"python":4,"EOF":5,"PY":6,"eol":7,"INDENT":8,"list_function":9,"DEDENT":10,"function":11,"body":12,"func_body":13,"statement":14,"assigment":15,"list_if":16,"while__":17,"for__":18,"return_":19,"break_":20,"continue_":21,"print_":22,"list_id":23,"COMMA":24,"ID":25,"EQUAL":26,"list_op":27,"a":28,"if_":29,"else_":30,"list_elif":31,"IF":32,"COLON":33,"function_body":34,"ELSE":35,"elif_":36,"ELIF":37,"while_":38,"WHILE":39,"for_":40,"FOR":41,"IN":42,"range":43,"RANGE":44,"LPAREN":45,"RPAREN":46,"DEF":47,"params":48,"BREAK":49,"CONTINUE":50,"RETURN":51,"input_":52,"INPUT":53,"PRINT":54,"PRINTLN":55,"OR":56,"b":57,"AND":58,"c":59,"EQEQ":60,"d":61,"NEQ":62,"GREATER":63,"GREATER_EQ":64,"SMALLER":65,"SMALLER_EQ":66,"PLUS":67,"e":68,"MINUS":69,"TIMES":70,"f":71,"DIVIDE":72,"MOD":73,"g":74,"POW":75,"h":76,"NOT":77,"i":78,"INTEGER":79,"DECIMAL":80,"STRING":81,"BOOL":82,"EOL":83,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"PY",8:"INDENT",10:"DEDENT",24:"COMMA",25:"ID",26:"EQUAL",32:"IF",33:"COLON",35:"ELSE",37:"ELIF",39:"WHILE",41:"FOR",42:"IN",44:"RANGE",45:"LPAREN",46:"RPAREN",47:"DEF",49:"BREAK",50:"CONTINUE",51:"RETURN",53:"INPUT",54:"PRINT",55:"PRINTLN",56:"OR",58:"AND",60:"EQEQ",62:"NEQ",63:"GREATER",64:"GREATER_EQ",65:"SMALLER",66:"SMALLER_EQ",67:"PLUS",69:"MINUS",70:"TIMES",72:"DIVIDE",73:"MOD",75:"POW",77:"NOT",79:"INTEGER",80:"DECIMAL",81:"STRING",82:"BOOL",83:"EOL"},
productions_: [0,[3,2],[4,5],[4,2],[9,2],[9,1],[12,2],[12,1],[13,2],[13,2],[13,1],[13,1],[13,1],[13,2],[13,2],[13,2],[13,2],[14,1],[23,3],[23,1],[15,3],[27,3],[27,1],[16,1],[16,2],[16,2],[16,3],[29,5],[30,4],[31,2],[31,1],[36,5],[17,1],[17,2],[38,5],[18,1],[18,2],[40,7],[43,4],[43,6],[43,8],[34,3],[34,0],[11,8],[48,1],[48,0],[20,1],[21,1],[19,2],[52,3],[22,4],[22,4],[28,3],[28,1],[57,3],[57,1],[59,3],[59,3],[59,3],[59,3],[59,3],[59,3],[59,1],[61,3],[61,3],[61,1],[68,3],[68,3],[68,3],[68,1],[71,3],[71,1],[74,2],[74,1],[76,2],[76,1],[78,1],[78,1],[78,1],[78,1],[78,1],[78,3],[7,2],[7,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2: case 41: case 81:
 this.$ = $$[$0-1]; 
break;
case 3: case 42: case 45:
 this.$ = []; 
break;
case 4: case 29:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 5: case 10: case 11: case 12: case 30:
 this.$ = [$$[$0]]; 
break;
case 6:
 this.$ = [...$$[$0-1], ...$$[$0]]; 
break;
case 7:
 this.$ = [...$$[$0]]; 
break;
case 9: case 13: case 14: case 15: case 16:
 this.$ = [$$[$0-1]]; 
break;
case 18: case 21:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 19: case 22:
 this.$ = []; this.$.push($$[$0]); 
break;
case 20:
 this.$ = new yy.AssignmentPY(this._$.first_line + yy.line, this._$.first_column, $$[$0-2], $$[$0]); 
break;
case 23:
 this.$ = new yy.IfInstructionPY(this._$.first_line + yy.line, this._$.first_column, [$$[$0]]); 
break;
case 24:
 this.$ = new yy.IfInstructionPY(this._$.first_line + yy.line, this._$.first_column, [$$[$0-1], $$[$0]]); 
break;
case 25:
 this.$ = new yy.IfInstructionPY(this._$.first_line + yy.line, this._$.first_column, [$$[$0-1], ...$$[$0]]); 
break;
case 26:
 this.$ = new yy.IfInstructionPY(this._$.first_line + yy.line, this._$.first_column, [$$[$0-2], ...$$[$0-1], $$[$0]]); 
break;
case 27:
 this.$ = new yy.IfPY(this._$.first_line + yy.line, this._$.first_column, "IF", $$[$0], $$[$0-3]); 
break;
case 28:
 this.$ = new yy.IfPY(this._$.first_line + yy.line, this._$.first_column, "ELSE", $$[$0], null); 
break;
case 31:
 this.$ = new yy.IfPY(this._$.first_line + yy.line, this._$.first_column, "ELIF", $$[$0], $$[$0-3]); 
break;
case 32: case 35: case 44: case 53: case 55: case 62: case 65: case 69: case 71: case 73: case 75:
 this.$ = $$[$0]; 
break;
case 34:
 this.$ = new yy.WhilePY(this._$.first_line + yy.line, this._$.first_column, $$[$0-3], $$[$0]); 
break;
case 37:
 this.$ = new yy.ForPY(this._$.first_line + yy.line, this._$.first_column, $$[$0-5], $$[$0-3], $$[$0]); 
break;
case 38:

				const tmp6 = new yy.Variable(yy.OperationType.INT, null, "0");
				const tmp7 = new yy.OperationPY(this._$.first_line + yy.line, this._$.first_column, yy.OperationType.INT, tmp6);

				const tmp8 = new yy.Variable(yy.OperationType.INT, null, "1");
				const tmp9 = new yy.OperationPY(this._$.first_line + yy.line, this._$.first_column, yy.OperationType.INT, tmp8);
				this.$ = [tmp7, $$[$0-1], tmp9]; // range(0, $$[$0-1], 1) inicio en 0, incremento en 1
			
break;
case 39:

				const tmp10 = new yy.Variable(yy.OperationType.INT, null, "1");
				const tmp11 = new yy.OperationPY(this._$.first_line + yy.line, this._$.first_column, yy.OperationType.INT, tmp10);
				this.$ = [$$[$0-3], $$[$0-1], tmp11]; //range($$[$0-3], $$[$0-1], 1) inicio en $$[$0-3], incremento en 1
			
break;
case 40:
 this.$ = [$$[$0-5], $$[$0-3], $$[$0-1]]; 
break;
case 43:
 this.$ = new yy.FunctionPY(this._$.first_line + yy.line, this._$.first_column, $$[$0-6], $$[$0-4], $$[$0]); 
break;
case 46:
 this.$ = new yy.Break(this._$.first_line + yy.line, this._$.first_column); 
break;
case 47:
 this.$ = new yy.Continue(this._$.first_line + yy.line, this._$.first_column); 
break;
case 48:
 this.$ = new yy.ReturnPY(this._$.first_line + yy.line, this._$.first_column, $$[$0]); 
break;
case 50:
 this.$ = new yy.PrintPY(this._$.first_line + yy.line, this._$.first_column, false, $$[$0-1]); 
break;
case 51:
 this.$ = new yy.PrintPY(this._$.first_line + yy.line, this._$.first_column, true, $$[$0-1]); 
break;
case 52:
 this.$ = new yy.OperationPY(this._$.first_line + yy.line, this._$.first_column, yy.OperationType.OR, $$[$0-2], $$[$0]); 
break;
case 54:
 this.$ = new yy.OperationPY(this._$.first_line + yy.line, this._$.first_column, yy.OperationType.AND, $$[$0-2], $$[$0]); 
break;
case 56:
 this.$ = new yy.OperationPY(this._$.first_line + yy.line, this._$.first_column, yy.OperationType.EQEQ, $$[$0-2], $$[$0]); 
break;
case 57:
 this.$ = new yy.OperationPY(this._$.first_line + yy.line, this._$.first_column, yy.OperationType.NEQ, $$[$0-2], $$[$0]); 
break;
case 58:
 this.$ = new yy.OperationPY(this._$.first_line + yy.line, this._$.first_column, yy.OperationType.GREATER, $$[$0-2], $$[$0]); 
break;
case 59:
 this.$ = new yy.OperationPY(this._$.first_line + yy.line, this._$.first_column, yy.OperationType.GREATER_EQ, $$[$0-2], $$[$0]); 
break;
case 60:
 this.$ = new yy.OperationPY(this._$.first_line + yy.line, this._$.first_column, yy.OperationType.SMALLER, $$[$0-2], $$[$0]); 
break;
case 61:
 this.$ = new yy.OperationPY(this._$.first_line + yy.line, this._$.first_column, yy.OperationType.SMALLER_EQ, $$[$0-2], $$[$0]); 
break;
case 63:
 this.$ = new yy.OperationPY(this._$.first_line + yy.line, this._$.first_column, yy.OperationType.SUM, $$[$0-2], $$[$0]); 
break;
case 64:
 this.$ = new yy.OperationPY(this._$.first_line + yy.line, this._$.first_column, yy.OperationType.SUB, $$[$0-2], $$[$0]); 
break;
case 66:
 this.$ = new yy.OperationPY(this._$.first_line + yy.line, this._$.first_column, yy.OperationType.MUL, $$[$0-2], $$[$0]); 
break;
case 67:
 this.$ = new yy.OperationPY(this._$.first_line + yy.line, this._$.first_column, yy.OperationType.DIV, $$[$0-2], $$[$0]); 
break;
case 68:
 this.$ = new yy.OperationPY(this._$.first_line + yy.line, this._$.first_column, yy.OperationType.MOD, $$[$0-2], $$[$0]); 
break;
case 70:
 this.$ = new yy.OperationPY(this._$.first_line + yy.line, this._$.first_column, yy.OperationType.POW, $$[$0-2], $$[$0]); 
break;
case 72:
 this.$ = new yy.OperationPY(this._$.first_line + yy.line, this._$.first_column, yy.OperationType.UMINUS, $$[$0], null); 
break;
case 74:
 this.$ = new yy.OperationPY(this._$.first_line + yy.line, this._$.first_column, yy.OperationType.NOT, $$[$0], null); 
break;
case 76:
 const tmp1 = new yy.Variable(yy.OperationType.INT, null, $$[$0]); this.$ = new yy.OperationPY(this._$.first_line + yy.line, this._$.first_column, yy.OperationType.INT, tmp1); 
break;
case 77:
 const tmp2 = new yy.Variable(yy.OperationType.FLOAT, null, $$[$0]); this.$ = new yy.OperationPY(this._$.first_line + yy.line, this._$.first_column, yy.OperationType.FLOAT, tmp2); 
break;
case 78:
 const tmp3 = new yy.Variable(yy.OperationType.STRING, null, $$[$0]); this.$ = new yy.OperationPY(this._$.first_line + yy.line, this._$.first_column, yy.OperationType.STRING, tmp3)  
break;
case 79:
 const tmp4 = new yy.Variable(yy.OperationType.BOOL, null, $$[$0]); this.$ = new yy.OperationPY(this._$.first_line + yy.line, this._$.first_column, yy.OperationType.BOOL, tmp4); 
break;
case 80:
 const tmp5 = new yy.Variable(yy.OperationType.ID, $$[$0], null); this.$ = new yy.OperationPY(this._$.first_line + yy.line, this._$.first_column, yy.OperationType.ID, tmp5); 
break;
}
},
table: [{3:1,4:2,6:[1,3]},{1:[3]},{5:[1,4]},{7:5,83:$V0},{1:[2,1]},{5:[2,3],8:[1,7],83:$V1},o($V2,[2,83]),{9:9,11:10,47:$V3},o($V2,[2,82]),{10:[1,12],11:13,47:$V3},o($V4,[2,5]),{25:[1,14]},{5:[2,2]},o($V4,[2,4]),{45:[1,15]},{23:17,25:$V5,46:[2,45],48:16},{46:[1,19]},{24:$V6,46:[2,44]},o($V7,[2,19]),{33:[1,21]},{25:[1,22]},{7:23,83:$V0},o($V7,[2,18]),o($V4,$V8,{34:24,8:$V9,83:$V1}),o($V4,[2,43]),{12:26,13:27,14:28,15:29,16:30,17:31,18:32,19:33,20:34,21:35,22:36,23:37,25:$V5,29:38,32:$Va,38:39,39:$Vb,40:40,41:$Vc,49:$Vd,50:$Ve,51:$Vf,54:$Vg,55:$Vh},{10:[1,49],13:50,14:28,15:29,16:30,17:31,18:32,19:33,20:34,21:35,22:36,23:37,25:$V5,29:38,32:$Va,38:39,39:$Vb,40:40,41:$Vc,49:$Vd,50:$Ve,51:$Vf,54:$Vg,55:$Vh},o($Vi,[2,7]),{7:51,83:$V0},{7:52,83:$V0},o($Vi,[2,10]),o($Vi,[2,11]),o($Vi,[2,12]),{7:53,83:$V0},{7:54,83:$V0},{7:55,83:$V0},{7:56,83:$V0},{24:$V6,26:[1,57],83:[2,17]},o($Vi,[2,23],{30:58,31:59,36:61,35:$Vj,37:$Vk}),o($Vi,[2,32],{30:63,35:$Vj}),o($Vi,[2,35],{30:64,35:$Vj}),{25:$Vl,28:65,45:$Vm,57:66,59:67,61:68,68:69,69:$Vn,71:70,74:71,76:73,77:$Vo,78:75,79:$Vp,80:$Vq,81:$Vr,82:$Vs},{83:[2,46]},{83:[2,47]},{45:[1,82]},{45:[1,83]},{25:$Vl,28:84,45:$Vm,57:66,59:67,61:68,68:69,69:$Vn,71:70,74:71,76:73,77:$Vo,78:75,79:$Vp,80:$Vq,81:$Vr,82:$Vs},{25:$Vl,28:85,45:$Vm,57:66,59:67,61:68,68:69,69:$Vn,71:70,74:71,76:73,77:$Vo,78:75,79:$Vp,80:$Vq,81:$Vr,82:$Vs},{25:[1,86]},o([10,25,32,35,37,39,41,47,49,50,51,54,55],[2,41]),o($Vi,[2,6]),o($Vi,[2,8],{83:$V1}),o($Vi,[2,9],{83:$V1}),o($Vi,[2,13],{83:$V1}),o($Vi,[2,14],{83:$V1}),o($Vi,[2,15],{83:$V1}),o($Vi,[2,16],{83:$V1}),{25:$Vl,27:87,28:88,45:$Vm,57:66,59:67,61:68,68:69,69:$Vn,71:70,74:71,76:73,77:$Vo,78:75,79:$Vp,80:$Vq,81:$Vr,82:$Vs},o($Vi,[2,24]),o($Vi,[2,25],{30:89,36:90,35:$Vj,37:$Vk}),{33:[1,91]},o($Vt,[2,30]),{25:$Vl,28:92,45:$Vm,57:66,59:67,61:68,68:69,69:$Vn,71:70,74:71,76:73,77:$Vo,78:75,79:$Vp,80:$Vq,81:$Vr,82:$Vs},o($Vi,[2,33]),o($Vi,[2,36]),{56:$Vu,83:[2,48]},o($Vv,[2,53],{58:$Vw}),o($Vx,[2,55],{60:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD}),o($VE,[2,62],{67:$VF,69:$VG}),o($VH,[2,65],{70:$VI,72:$VJ,73:$VK}),o($VL,[2,69]),o($VL,[2,71],{75:[1,106]}),{25:$Vl,45:$Vm,76:107,77:$Vo,78:75,79:$Vp,80:$Vq,81:$Vr,82:$Vs},o($VM,[2,73]),{25:$Vl,45:$Vm,76:108,77:$Vo,78:75,79:$Vp,80:$Vq,81:$Vr,82:$Vs},o($VM,[2,75]),o($VM,[2,76]),o($VM,[2,77]),o($VM,[2,78]),o($VM,[2,79]),o($VM,[2,80]),{25:$Vl,28:109,45:$Vm,57:66,59:67,61:68,68:69,69:$Vn,71:70,74:71,76:73,77:$Vo,78:75,79:$Vp,80:$Vq,81:$Vr,82:$Vs},{25:$Vl,27:110,28:88,45:$Vm,57:66,59:67,61:68,68:69,69:$Vn,71:70,74:71,76:73,77:$Vo,78:75,79:$Vp,80:$Vq,81:$Vr,82:$Vs},{25:$Vl,27:111,28:88,45:$Vm,57:66,59:67,61:68,68:69,69:$Vn,71:70,74:71,76:73,77:$Vo,78:75,79:$Vp,80:$Vq,81:$Vr,82:$Vs},{33:[1,112],56:$Vu},{33:[1,113],56:$Vu},{42:[1,114]},{24:$VN,83:[2,20]},o($VO,[2,22],{56:$Vu}),o($Vi,[2,26]),o($Vt,[2,29]),{7:116,83:$V0},{33:[1,117],56:$Vu},{25:$Vl,45:$Vm,57:118,59:67,61:68,68:69,69:$Vn,71:70,74:71,76:73,77:$Vo,78:75,79:$Vp,80:$Vq,81:$Vr,82:$Vs},{25:$Vl,45:$Vm,59:119,61:68,68:69,69:$Vn,71:70,74:71,76:73,77:$Vo,78:75,79:$Vp,80:$Vq,81:$Vr,82:$Vs},{25:$Vl,45:$Vm,61:120,68:69,69:$Vn,71:70,74:71,76:73,77:$Vo,78:75,79:$Vp,80:$Vq,81:$Vr,82:$Vs},{25:$Vl,45:$Vm,61:121,68:69,69:$Vn,71:70,74:71,76:73,77:$Vo,78:75,79:$Vp,80:$Vq,81:$Vr,82:$Vs},{25:$Vl,45:$Vm,61:122,68:69,69:$Vn,71:70,74:71,76:73,77:$Vo,78:75,79:$Vp,80:$Vq,81:$Vr,82:$Vs},{25:$Vl,45:$Vm,61:123,68:69,69:$Vn,71:70,74:71,76:73,77:$Vo,78:75,79:$Vp,80:$Vq,81:$Vr,82:$Vs},{25:$Vl,45:$Vm,61:124,68:69,69:$Vn,71:70,74:71,76:73,77:$Vo,78:75,79:$Vp,80:$Vq,81:$Vr,82:$Vs},{25:$Vl,45:$Vm,61:125,68:69,69:$Vn,71:70,74:71,76:73,77:$Vo,78:75,79:$Vp,80:$Vq,81:$Vr,82:$Vs},{25:$Vl,45:$Vm,68:126,69:$Vn,71:70,74:71,76:73,77:$Vo,78:75,79:$Vp,80:$Vq,81:$Vr,82:$Vs},{25:$Vl,45:$Vm,68:127,69:$Vn,71:70,74:71,76:73,77:$Vo,78:75,79:$Vp,80:$Vq,81:$Vr,82:$Vs},{25:$Vl,45:$Vm,69:$Vn,71:128,74:71,76:73,77:$Vo,78:75,79:$Vp,80:$Vq,81:$Vr,82:$Vs},{25:$Vl,45:$Vm,69:$Vn,71:129,74:71,76:73,77:$Vo,78:75,79:$Vp,80:$Vq,81:$Vr,82:$Vs},{25:$Vl,45:$Vm,69:$Vn,71:130,74:71,76:73,77:$Vo,78:75,79:$Vp,80:$Vq,81:$Vr,82:$Vs},{25:$Vl,45:$Vm,69:$Vn,71:131,74:71,76:73,77:$Vo,78:75,79:$Vp,80:$Vq,81:$Vr,82:$Vs},o($VM,[2,72]),o($VM,[2,74]),{46:[1,132],56:$Vu},{24:$VN,46:[1,133]},{24:$VN,46:[1,134]},{7:135,83:$V0},{7:136,83:$V0},{43:137,44:[1,138]},{25:$Vl,28:139,45:$Vm,57:66,59:67,61:68,68:69,69:$Vn,71:70,74:71,76:73,77:$Vo,78:75,79:$Vp,80:$Vq,81:$Vr,82:$Vs},o($Vi,$V8,{34:140,8:$V9,83:$V1}),{7:141,83:$V0},o($Vv,[2,52],{58:$Vw}),o($Vx,[2,54],{60:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD}),o($VE,[2,56],{67:$VF,69:$VG}),o($VE,[2,57],{67:$VF,69:$VG}),o($VE,[2,58],{67:$VF,69:$VG}),o($VE,[2,59],{67:$VF,69:$VG}),o($VE,[2,60],{67:$VF,69:$VG}),o($VE,[2,61],{67:$VF,69:$VG}),o($VH,[2,63],{70:$VI,72:$VJ,73:$VK}),o($VH,[2,64],{70:$VI,72:$VJ,73:$VK}),o($VL,[2,66]),o($VL,[2,67]),o($VL,[2,68]),o($VL,[2,70]),o($VM,[2,81]),{83:[2,50]},{83:[2,51]},o($Vt,$V8,{34:142,8:$V9,83:$V1}),o($VP,$V8,{34:143,8:$V9,83:$V1}),{33:[1,144]},{45:[1,145]},o($VO,[2,21],{56:$Vu}),o($Vi,[2,28]),o($Vt,$V8,{34:146,8:$V9,83:$V1}),o($Vt,[2,27]),o($VP,[2,34]),{7:147,83:$V0},{25:$Vl,28:148,45:$Vm,57:66,59:67,61:68,68:69,69:$Vn,71:70,74:71,76:73,77:$Vo,78:75,79:$Vp,80:$Vq,81:$Vr,82:$Vs},o($Vt,[2,31]),o($VP,$V8,{34:149,8:$V9,83:$V1}),{24:[1,151],46:[1,150],56:$Vu},o($VP,[2,37]),{33:[2,38]},{25:$Vl,28:152,45:$Vm,57:66,59:67,61:68,68:69,69:$Vn,71:70,74:71,76:73,77:$Vo,78:75,79:$Vp,80:$Vq,81:$Vr,82:$Vs},{24:[1,154],46:[1,153],56:$Vu},{33:[2,39]},{25:$Vl,28:155,45:$Vm,57:66,59:67,61:68,68:69,69:$Vn,71:70,74:71,76:73,77:$Vo,78:75,79:$Vp,80:$Vq,81:$Vr,82:$Vs},{46:[1,156],56:$Vu},{33:[2,40]}],
defaultActions: {4:[2,1],12:[2,2],42:[2,46],43:[2,47],133:[2,50],134:[2,51],150:[2,38],153:[2,39],156:[2,40]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	let indents = [0];
	let string = "";
	let char = "";
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return "PY";
break;
case 1:return "PRINT";
break;
case 2:return "PRINTLN";
break;
case 3:return "BOOL";
break;
case 4:return "BOOL";
break;
case 5:return "AND";
break;
case 6:return "OR";
break;
case 7:return "NOT";
break;
case 8:return "BREAK";
break;
case 9:return "CONTINUE";
break;
case 10:return "RETURN";
break;
case 11:return "DEF";
break;
case 12:return "FOR";
break;
case 13:return "IN";
break;
case 14:return "IF";
break;
case 15:return "ELIF";
break;
case 16:return "ELSE";
break;
case 17:return "WHILE";
break;
case 18:return "RANGE";
break;
case 19:return "INPUT";
break;
case 20:return "PLUS";
break;
case 21:return "MINUS";
break;
case 22:return "TIMES";
break;
case 23:return "POW";
break;
case 24:return "MOD";
break;
case 25:return "LPAREN";
break;
case 26:return "RPAREN";
break;
case 27:return "COLON";
break;
case 28:return "COMMA";
break;
case 29:return "EQEQ";
break;
case 30:return "EQUAL";
break;
case 31:return "NEQ";
break;
case 32:return "GREATER_EQ";
break;
case 33:return "GREATER";
break;
case 34:return "SMALLER_EQ";
break;
case 35:return "SMALLER";
break;
case 36:return "DECIMAL";
break;
case 37:return "INTEGER";
break;
case 38:return "ID";
break;
case 39:/* ignore */
break;
case 40:/* ignore */
break;
case 41:return "DIVIDE";
break;
case 42:
									string = "";
									this.pushState("STRING");
								
break;
case 43:
									char = "";
									this.pushState("CHAR");
								
break;
case 44:
									if(this.matches.input === '\n') {
										// console.log(this);
										while(indents.length > 1) {
											this.unput(yy_.yytext);
											indents.pop();
											return "DEDENT";
										}
										return "EOF";
									}
									this.pushState("LINE");
									return "EOL";
								
break;
case 45:return "EOF";
break;
case 46:
									console.log(`Error lexico: ${yy_.yytext}`);
									// console.log(this);
									return "INVALID";
								
break;
case 47:
									if(this.matches.input === '\n') {
										// console.log(this);
										while(indents.length > 1) {
											this.unput(yy_.yytext);
											indents.pop();
											return "DEDENT";
										}
										return "EOF";
									}
									return "EOL";
								
break;
case 48:/* ignore */
break;
case 49:/* ignore */
break;
case 50:
									let text = yy_.yytext.replace(/    /g, "\t")
									let ind = text.length;
									let last = indents[indents.length - 1];
									// console.log(`Identacion -> ${ind}`);

									if(last === 0) {
										if(ind > 1) {
											console.log(`Error de identacion: ${ind}`);
											this.popState();
										} else {
											indents.push(ind);
											this.popState();
											return "INDENT";
										}
									} else if(ind === last) {
										// do nothing
										this.popState();
									} else if(ind === last + 1) {
										indents.push(ind);
										this.popState();
										return "INDENT";
									} else if(ind > last + 1) {
										console.log(`Error de identacion: ${ind}`);
										this.popState();
									} else if(ind < last) {
										while(ind !== last) {
											last = indents.pop();
											this.unput(yy_.yytext);
											return "DEDENT";
										}
										this.popState();
									}
								
break;
case 51:/* ignore */
break;
case 52:return "EOF";
break;
case 53:
									this.unput(yy_.yytext);
									this.popState();
								
break;
case 54:
									yy_.yytext = string;
									this.popState();
									return "STRING";
								
break;
case 55:string += yy_.yytext;
break;
case 56:string += "\\t";
break;
case 57:string += "\\n";
break;
case 58:string += "\\\"";
break;
case 59:string += "\\\\";
break;
case 60:
									yy_.yytext = char;
									this.popState();
									return "STRING";
								
break;
case 61:char += yy_.yytext;
break;
case 62:char += "\\t";
break;
case 63:char += "\\n";
break;
case 64:char += "\\\'";
break;
case 65:char += "\\\\";
break;
}
},
rules: [/^(?:(%%PY\b))/,/^(?:(print\b))/,/^(?:(println\b))/,/^(?:(False\b))/,/^(?:(True\b))/,/^(?:(and\b))/,/^(?:(or\b))/,/^(?:(not\b))/,/^(?:(break\b))/,/^(?:(continue\b))/,/^(?:(return\b))/,/^(?:(def\b))/,/^(?:(for\b))/,/^(?:(in\b))/,/^(?:(if\b))/,/^(?:(elif\b))/,/^(?:(else\b))/,/^(?:(while\b))/,/^(?:(range\b))/,/^(?:(input\b))/,/^(?:(\+))/,/^(?:(-))/,/^(?:(\*))/,/^(?:(\^))/,/^(?:(%))/,/^(?:(\())/,/^(?:(\)))/,/^(?:(:))/,/^(?:(,))/,/^(?:(==))/,/^(?:(=))/,/^(?:(!=))/,/^(?:(>=))/,/^(?:(>))/,/^(?:(<=))/,/^(?:(<))/,/^(?:(([1-9][0-9]+|[0-9])\.[0-9]+))/,/^(?:([1-9][0-9]+|[0-9]))/,/^(?:([a-zA-Z_]\w*))/,/^(?:([ \t]+))/,/^(?:(([ \t]*\/\/[^\r\n]*)|([ \t]*\/\*(([^*]|\*+[^/*])*)\*+\/)))/,/^(?:(\/))/,/^(?:(["]))/,/^(?:([']))/,/^(?:(\r|\n|\r\n))/,/^(?:$)/,/^(?:.)/,/^(?:[\n])/,/^(?:(([ \t]*\/\/[^\r\n]*)|([ \t]*\/\*(([^*]|\*+[^/*])*)\*+\/)))/,/^(?:([ \t]+)[\n])/,/^(?:(([\t])|    )+)/,/^(?:([ \t]+))/,/^(?:$)/,/^(?:.)/,/^(?:(["]))/,/^(?:[^\n\r\"\\]+)/,/^(?:\\t)/,/^(?:\\n)/,/^(?:\\")/,/^(?:\\)/,/^(?:([']))/,/^(?:[^\n\r\'\\]+)/,/^(?:\\t)/,/^(?:\\n)/,/^(?:\\')/,/^(?:\\)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46],"inclusive":true},"CHAR":{"rules":[60,61,62,63,64,65],"inclusive":true},"STRING":{"rules":[54,55,56,57,58,59],"inclusive":true},"LINE":{"rules":[47,48,49,50,51,52,53],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = python;
exports.Parser = python.Parser;
exports.parse = function () { return python.parse.apply(python, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var program = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[5,17,23,25,26,46,59,60,61],$V1=[5,23,25,26,46,59,60,61],$V2=[1,25],$V3=[1,21],$V4=[1,22],$V5=[1,23],$V6=[22,55],$V7=[1,38],$V8=[2,49],$V9=[1,45],$Va=[5,19,23,25,26,32,46,59,60,61,67,70,71,72,73,78,80,81,82,84,85,86,88],$Vb=[1,68],$Vc=[1,69],$Vd=[1,64],$Ve=[1,65],$Vf=[1,62],$Vg=[1,70],$Vh=[1,63],$Vi=[1,56],$Vj=[1,58],$Vk=[1,60],$Vl=[1,61],$Vm=[22,48,52],$Vn=[1,82],$Vo=[22,29,55],$Vp=[1,84],$Vq=[22,29,53,55,79,90],$Vr=[1,85],$Vs=[22,29,53,55,79,90,92],$Vt=[1,86],$Vu=[1,87],$Vv=[1,88],$Vw=[1,89],$Vx=[1,90],$Vy=[1,91],$Vz=[22,29,53,55,79,90,92,94,96,97,98,99,100],$VA=[1,92],$VB=[1,93],$VC=[22,29,53,55,79,90,92,94,96,97,98,99,100,101,103],$VD=[1,94],$VE=[1,95],$VF=[1,96],$VG=[21,22,29,53,55,79,90,92,94,96,97,98,99,100,101,103,105,106],$VH=[21,22,29,53,55,79,90,92,94,96,97,98,99,100,101,103,105,106,108],$VI=[1,108],$VJ=[20,22],$VK=[19,23,25,32,59,60,61,67,70,71,72,73,81,82,84,85,86,88],$VL=[2,23],$VM=[1,146],$VN=[1,148],$VO=[1,151],$VP=[29,55],$VQ=[1,170],$VR=[1,181],$VS=[1,172],$VT=[1,173],$VU=[1,176],$VV=[1,177],$VW=[1,174],$VX=[1,175],$VY=[1,178],$VZ=[1,179],$V_=[1,180],$V$=[2,91],$V01=[19,23,25,32,59,60,61,67,70,71,72,73,78,80,81,82,84,85,86,88],$V11=[1,194],$V21=[19,23,25,32,59,60,61,67,68,70,71,72,73,78,80,81,82,84,85,86,88],$V31=[1,257],$V41=[1,256],$V51=[32,78,80];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"initial":3,"program":4,"EOF":5,"PROGRAM":6,"includes":7,"body":8,"body_opt":9,"const":10,"statement":11,"array_statement":12,"assigment":13,"class_statement":14,"main":15,"include":16,"NUMERAL":17,"INCLUDE":18,"PY":19,"DOT":20,"TIMES":21,"SEMI":22,"JAVA":23,"dir":24,"ID":25,"VOID":26,"MAIN":27,"LPAREN":28,"RPAREN":29,"LBRACE":30,"main_body":31,"RBRACE":32,"main_b":33,"list_if":34,"while_":35,"do_while_":36,"continue_":37,"break_":38,"for_":39,"switch_":40,"function_call":41,"clear_":42,"getch_":43,"printf_":44,"scanf_":45,"CONST":46,"type":47,"EQUAL":48,"a":49,"dimensions":50,"dimension":51,"LBRACKET":52,"RBRACKET":53,"list_opt":54,"COMMA":55,"option":56,"list_assign":57,"assign":58,"INT":59,"CHAR":60,"FLOAT":61,"list_id":62,"param":63,"if_":64,"else_":65,"list_else_if":66,"IF":67,"ELSE":68,"else_if":69,"WHILE":70,"DO":71,"FOR":72,"SWITCH":73,"switch_opt":74,"list_case":75,"default_":76,"case_":77,"CASE":78,"COLON":79,"DEFAULT":80,"CONTINUE":81,"BREAK":82,"params":83,"GETCH":84,"CLEAR":85,"PRINTF":86,"STRING":87,"SCANF":88,"AMP":89,"OR":90,"b":91,"AND":92,"c":93,"EQEQ":94,"d":95,"NEQ":96,"GREATER":97,"GREATER_EQ":98,"SMALLER":99,"SMALLER_EQ":100,"PLUS":101,"e":102,"MINUS":103,"f":104,"DIVIDE":105,"MOD":106,"g":107,"POW":108,"h":109,"NOT":110,"i":111,"INTEGER":112,"DECIMAL":113,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"PROGRAM",17:"NUMERAL",18:"INCLUDE",19:"PY",20:"DOT",21:"TIMES",22:"SEMI",23:"JAVA",25:"ID",26:"VOID",27:"MAIN",28:"LPAREN",29:"RPAREN",30:"LBRACE",32:"RBRACE",46:"CONST",48:"EQUAL",52:"LBRACKET",53:"RBRACKET",55:"COMMA",59:"INT",60:"CHAR",61:"FLOAT",67:"IF",68:"ELSE",70:"WHILE",71:"DO",72:"FOR",73:"SWITCH",78:"CASE",79:"COLON",80:"DEFAULT",81:"CONTINUE",82:"BREAK",84:"GETCH",85:"CLEAR",86:"PRINTF",87:"STRING",88:"SCANF",89:"AMP",90:"OR",92:"AND",94:"EQEQ",96:"NEQ",97:"GREATER",98:"GREATER_EQ",99:"SMALLER",100:"SMALLER_EQ",101:"PLUS",103:"MINUS",105:"DIVIDE",106:"MOD",108:"POW",110:"NOT",112:"INTEGER",113:"DECIMAL"},
productions_: [0,[3,2],[4,3],[8,2],[8,0],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[7,2],[7,0],[16,6],[16,6],[16,6],[16,8],[16,6],[16,8],[24,3],[24,1],[15,7],[31,2],[31,0],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,2],[33,1],[33,2],[33,1],[33,1],[10,6],[12,4],[50,2],[50,1],[51,3],[11,3],[54,3],[54,1],[56,3],[56,1],[13,2],[57,3],[57,1],[58,3],[58,4],[47,1],[47,1],[47,1],[14,5],[14,8],[62,3],[62,1],[63,3],[63,1],[34,1],[34,2],[34,2],[34,3],[64,7],[65,4],[66,2],[66,1],[69,8],[35,7],[36,9],[39,14],[39,11],[40,7],[74,1],[74,2],[74,1],[74,0],[75,2],[75,1],[77,4],[76,3],[37,2],[38,2],[41,6],[41,8],[83,1],[83,0],[43,3],[42,4],[44,5],[44,7],[45,8],[49,3],[49,1],[91,3],[91,1],[93,3],[93,3],[93,3],[93,3],[93,3],[93,3],[93,1],[95,3],[95,3],[95,1],[102,3],[102,3],[102,3],[102,1],[104,3],[104,1],[107,2],[107,1],[109,2],[109,1],[111,1],[111,1],[111,1],[111,1],[111,1],[111,3],[111,1],[111,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2: case 3: case 22:
 this.$ = [...$$[$0-1], ...$$[$0]]; 
break;
case 4: case 12: case 23: case 81:
 this.$ = []; 
break;
case 5: case 7: case 9: case 10: case 20: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 36: case 38: case 39: case 43: case 49: case 61: case 80:
 this.$ = [$$[$0]]; 
break;
case 6: case 8: case 24: case 25:
 this.$ = [...$$[$0]]; 
break;
case 11: case 42: case 70: case 82:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 13: case 14:
 this.$ = new yy.Include(this._$.first_line + yy.line, this._$.first_column, $$[$0-3], [], true); 
break;
case 15: case 17:
 this.$ = new yy.Include(this._$.first_line + yy.line, this._$.first_column, $$[$0-3], $$[$0-1], false); 
break;
case 16: case 18:
 this.$ = new yy.Include(this._$.first_line + yy.line, this._$.first_column, $$[$0-5], $$[$0-3], true); 
break;
case 19: case 46: case 51: case 60: case 62:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 21:
 this.$ = new yy.Main(this._$.first_line + yy.line, this._$.first_column, $$[$0-1]); 
break;
case 35: case 37:
 this.$ = [$$[$0-1]]; 
break;
case 40:
 this.$ = new yy.Statement(this._$.first_line + yy.line, this._$.first_column, true, $$[$0-4], $$[$0-3], $$[$0-1]); 
break;
case 41:
 this.$ = new yy.ArrayStatement(this._$.first_line + yy.line, this._$.first_column, $$[$0-3], $$[$0-2], $$[$0-1]); 
break;
case 44: case 50: case 126:
 this.$ = $$[$0-1]; 
break;
case 45:

				this.$ = [];
				for(const element of $$[$0-1]) {
					if(element.length === 1) {
						const tmp = new yy.Statement(this._$.first_line + yy.line, this._$.first_column, false, $$[$0-2], element[0], null);
						this.$.push(tmp);
					} else if(element.length === 2) {
						const tmp = new yy.Statement(this._$.first_line + yy.line, this._$.first_column, false, $$[$0-2], element[0], element[1]);
						this.$.push(tmp);
					}
				}
			
break;
case 47: case 52: case 63: case 71: case 83:
 this.$ = []; this.$.push($$[$0]); 
break;
case 48:
 this.$ = [$$[$0-2], $$[$0]]; 
break;
case 53:
 this.$ = new yy.Assignment(this._$.first_line + yy.line, this._$.first_column, $$[$0-2], $$[$0]); 
break;
case 54:
 this.$ = new yy.ArrayAssignment(this._$.first_line + yy.line, this._$.first_column, new yy.ArrayAccess($$[$0-3], $$[$0-2]), $$[$0]); 
break;
case 55:
 this.$ = yy.OperationType.INT; 
break;
case 56:
 this.$ = yy.OperationType.CHAR; 
break;
case 57:
 this.$ = yy.OperationType.FLOAT; 
break;
case 58:
 this.$ = new yy.CreateClass(this._$.first_line + yy.line, this._$.first_column, $$[$0-2], $$[$0-1], []); 
break;
case 59:
 this.$ = new yy.CreateClass(this._$.first_line + yy.line, this._$.first_column, $$[$0-5], [$$[$0-4]], $$[$0-2]); 
break;
case 64:
 this.$ = new yy.IfInstruction(this._$.first_line + yy.line, this._$.first_column, [$$[$0]]); 
break;
case 65:
 this.$ = new yy.IfInstruction(this._$.first_line + yy.line, this._$.first_column, [$$[$0-1], $$[$0]]); 
break;
case 66:
 this.$ = new yy.IfInstruction(this._$.first_line + yy.line, this._$.first_column, [$$[$0-1], ...$$[$0]]); 
break;
case 67:
 this.$ = new yy.IfInstruction(this._$.first_line + yy.line, this._$.first_column, [$$[$0-2], ...$$[$0-1], $$[$0]]); 
break;
case 68:
 this.$ = new yy.If(this._$.first_line + yy.line, this._$.first_column, "IF", $$[$0-1], $$[$0-4]); 
break;
case 69:
 this.$ = new yy.If(this._$.first_line + yy.line, this._$.first_column, "ELSE", $$[$0-1], null); 
break;
case 72:
 this.$ = new yy.If(this._$.first_line + yy.line, this._$.first_column, "ELSE_IF", $$[$0-1], $$[$0-4]); 
break;
case 73:
 this.$ = new yy.While(this._$.first_line + yy.line, this._$.first_column, $$[$0-4], $$[$0-1]); 
break;
case 74:
 this.$ = new yy.DoWhile(this._$.first_line + yy.line, this._$.first_column, $$[$0-2], $$[$0-6]); 
break;
case 75:

				const tmp_s = new yy.Statement(this._$.first_line + yy.line, this._$.first_column, false, yy.OperationType.INT, $$[$0-10], $$[$0-8]);
				this.$ = new yy.For(this._$.first_line + yy.line, this._$.first_column, $$[$0-6], $$[$0-4], $$[$0-1], tmp_s, null);
			
break;
case 76:
 this.$ = new yy.For(this._$.first_line + yy.line, this._$.first_column, $$[$0-6], $$[$0-4], $$[$0-1], null, $$[$0-8]); 
break;
case 77:
 this.$ = new yy.Switch(this._$.first_line + yy.line, this._$.first_column, $$[$0-4], $$[$0-1]); 
break;
case 78: case 90: case 98: case 100: case 107: case 110: case 114: case 116: case 118: case 120:
 this.$ = $$[$0]; 
break;
case 79:
 this.$ = [...$$[$0-1], $$[$0]]; 
break;
case 84:
 this.$ = new yy.Case(this._$.first_line + yy.line, this._$.first_column, $$[$0], $$[$0-2]); 
break;
case 85:
 this.$ = new yy.Case(this._$.first_line + yy.line, this._$.first_column, $$[$0], null); 
break;
case 86:
 this.$ = new yy.Continue(this._$.first_line + yy.line, this._$.first_column); 
break;
case 87:
 this.$ = new yy.Break(this._$.first_line + yy.line, this._$.first_column); 
break;
case 88:
 this.$ = new yy.FunctionCall(this._$.first_line + yy.line, this._$.first_column, "PYTHON", "", $$[$0-3], $$[$0-1]); 
break;
case 89:
 this.$ = new yy.FunctionCall(this._$.first_line + yy.line, this._$.first_column, "JAVA", $$[$0-5], $$[$0-3], $$[$0-1]); 
break;
case 91:
this.$ = []; 
break;
case 92:
 this.$ = new yy.Getch(this._$.first_line + yy.line, this._$.first_column, $$[$0-2]); 
break;
case 93:
 this.$ = new yy.Clear(this._$.first_line + yy.line, this._$.first_column); 
break;
case 94:
 this.$ = new yy.Printf(this._$.first_line + yy.line, this._$.first_column, $$[$0-2], [...format], null); format = []; 
break;
case 95:
 this.$ = new yy.Printf(this._$.first_line + yy.line, this._$.first_column, $$[$0-4], [...format], $$[$0-2]); format = []; 
break;
case 96:
 this.$ = new yy.Scanf(this._$.first_line + yy.line, this._$.first_column, $$[$0-5], $$[$0-2], format); format = []; 
break;
case 97:
 this.$ = new yy.Operation(this._$.first_line + yy.line, this._$.first_column, yy.OperationType.OR, $$[$0-2], $$[$0]); 
break;
case 99:
 this.$ = new yy.Operation(this._$.first_line + yy.line, this._$.first_column, yy.OperationType.AND, $$[$0-2], $$[$0]); 
break;
case 101:
 this.$ = new yy.Operation(this._$.first_line + yy.line, this._$.first_column, yy.OperationType.EQEQ, $$[$0-2], $$[$0]); 
break;
case 102:
 this.$ = new yy.Operation(this._$.first_line + yy.line, this._$.first_column, yy.OperationType.NEQ, $$[$0-2], $$[$0]); 
break;
case 103:
 this.$ = new yy.Operation(this._$.first_line + yy.line, this._$.first_column, yy.OperationType.GREATER, $$[$0-2], $$[$0]); 
break;
case 104:
 this.$ = new yy.Operation(this._$.first_line + yy.line, this._$.first_column, yy.OperationType.GREATER_EQ, $$[$0-2], $$[$0]); 
break;
case 105:
 this.$ = new yy.Operation(this._$.first_line + yy.line, this._$.first_column, yy.OperationType.SMALLER, $$[$0-2], $$[$0]); 
break;
case 106:
 this.$ = new yy.Operation(this._$.first_line + yy.line, this._$.first_column, yy.OperationType.SMALLER_EQ, $$[$0-2], $$[$0]); 
break;
case 108:
 this.$ = new yy.Operation(this._$.first_line + yy.line, this._$.first_column, yy.OperationType.SUM, $$[$0-2], $$[$0]); 
break;
case 109:
 this.$ = new yy.Operation(this._$.first_line + yy.line, this._$.first_column, yy.OperationType.SUB, $$[$0-2], $$[$0]); 
break;
case 111:
 this.$ = new yy.Operation(this._$.first_line + yy.line, this._$.first_column, yy.OperationType.MUL, $$[$0-2], $$[$0]); 
break;
case 112:
 this.$ = new yy.Operation(this._$.first_line + yy.line, this._$.first_column, yy.OperationType.DIV, $$[$0-2], $$[$0]); 
break;
case 113:
 this.$ = new yy.Operation(this._$.first_line + yy.line, this._$.first_column, yy.OperationType.MOD, $$[$0-2], $$[$0]); 
break;
case 115:
 this.$ = new yy.Operation(this._$.first_line + yy.line, this._$.first_column, yy.OperationType.POW, $$[$0-2], $$[$0]); 
break;
case 117:
 this.$ = new yy.Operation(this._$.first_line + yy.line, this._$.first_column, yy.OperationType.UMINUS, $$[$0], null); 
break;
case 119:
 this.$ = new yy.Operation(this._$.first_line + yy.line, this._$.first_column, yy.OperationType.NOT, $$[$0], null); 
break;
case 121:
 const tmp = new yy.Variable(yy.OperationType.INT, null, $$[$0]); this.$ = new yy.Operation(this._$.first_line + yy.line, this._$.first_column, yy.OperationType.INT, tmp); 
break;
case 122:
 const tmp1 = new yy.Variable(yy.OperationType.FLOAT, null, $$[$0]); this.$ = new yy.Operation(this._$.first_line + yy.line, this._$.first_column, yy.OperationType.FLOAT, tmp1); 
break;
case 123:
 const tmp2 = new yy.Variable(yy.OperationType.CHAR, null, $$[$0]); this.$ = new yy.Operation(this._$.first_line + yy.line, this._$.first_column, yy.OperationType.CHAR, tmp2); 
break;
case 124:
 const tmp3 = new yy.Variable(yy.OperationType.STRING, null, $$[$0]); this.$ = new yy.Operation(this._$.first_line + yy.line, this._$.first_column, yy.OperationType.STRING, tmp3); 
break;
case 125:
 const tmp4 = new yy.Variable(yy.OperationType.ID, $$[$0], null); this.$ = new yy.Operation(this._$.first_line + yy.line, this._$.first_column, yy.OperationType.ID, tmp4); 
break;
case 127:
 this.$ = new yy.Operation(this._$.first_line + yy.line, this._$.first_column, $$[$0]); 
break;
}
},
table: [{3:1,4:2,6:[1,3]},{1:[3]},{5:[1,4]},o($V0,[2,12],{7:5}),{1:[2,1]},o($V1,[2,4],{8:6,16:7,17:[1,8]}),{5:[2,2],9:9,10:10,11:11,12:12,13:13,14:14,15:15,23:[1,19],25:$V2,26:[1,20],46:[1,16],47:17,57:18,58:24,59:$V3,60:$V4,61:$V5},o($V0,[2,11]),{18:[1,26]},o($V1,[2,3]),o($V1,[2,5]),o($V1,[2,6]),o($V1,[2,7]),o($V1,[2,8]),o($V1,[2,9]),o($V1,[2,10]),{47:27,59:$V3,60:$V4,61:$V5},{25:[1,29],54:28,56:30},{22:[1,31],55:[1,32]},{20:[1,33]},{27:[1,34]},{25:[2,55]},{25:[2,56]},{25:[2,57]},o($V6,[2,52]),{48:[1,35],50:36,51:37,52:$V7},{19:[1,39],23:[1,40]},{25:[1,41]},{22:[1,42],55:[1,43]},o($V6,$V8,{51:37,50:44,48:$V9,52:$V7}),o($V6,[2,47]),o($Va,[2,50]),{25:$V2,58:46},{25:[1,47]},{28:[1,48]},{19:$Vb,23:$Vc,25:$Vd,28:$Ve,41:66,43:67,49:49,60:$Vf,84:$Vg,87:$Vh,91:50,93:51,95:52,102:53,103:$Vi,104:54,107:55,109:57,110:$Vj,111:59,112:$Vk,113:$Vl},{48:[1,71],51:72,52:$V7},o($Vm,[2,43]),{19:$Vb,23:$Vc,25:$Vd,28:$Ve,41:66,43:67,49:73,60:$Vf,84:$Vg,87:$Vh,91:50,93:51,95:52,102:53,103:$Vi,104:54,107:55,109:57,110:$Vj,111:59,112:$Vk,113:$Vl},{20:[1,74]},{20:[1,75]},{48:[1,76]},o($Va,[2,45]),{25:[1,78],56:77},{22:[1,79],51:72,52:$V7},{19:$Vb,23:$Vc,25:$Vd,28:$Ve,41:66,43:67,49:80,60:$Vf,84:$Vg,87:$Vh,91:50,93:51,95:52,102:53,103:$Vi,104:54,107:55,109:57,110:$Vj,111:59,112:$Vk,113:$Vl},o($V6,[2,51]),{25:$Vn,62:81},{29:[1,83]},o($Vo,[2,53],{90:$Vp}),o($Vq,[2,98],{92:$Vr}),o($Vs,[2,100],{94:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy}),o($Vz,[2,107],{101:$VA,103:$VB}),o($VC,[2,110],{21:$VD,105:$VE,106:$VF}),o($VG,[2,114]),o($VG,[2,116],{108:[1,97]}),{19:$Vb,23:$Vc,25:$Vd,28:$Ve,41:66,43:67,60:$Vf,84:$Vg,87:$Vh,109:98,110:$Vj,111:59,112:$Vk,113:$Vl},o($VH,[2,118]),{19:$Vb,23:$Vc,25:$Vd,28:$Ve,41:66,43:67,60:$Vf,84:$Vg,87:$Vh,109:99,110:$Vj,111:59,112:$Vk,113:$Vl},o($VH,[2,120]),o($VH,[2,121]),o($VH,[2,122]),o($VH,[2,123]),o($VH,[2,124]),o($VH,[2,125]),{19:$Vb,23:$Vc,25:$Vd,28:$Ve,41:66,43:67,49:100,60:$Vf,84:$Vg,87:$Vh,91:50,93:51,95:52,102:53,103:$Vi,104:54,107:55,109:57,110:$Vj,111:59,112:$Vk,113:$Vl},o($VH,[2,127]),o($VH,[2,128]),{20:[1,101]},{20:[1,102]},{28:[1,103]},{19:$Vb,23:$Vc,25:$Vd,28:$Ve,41:66,43:67,49:104,60:$Vf,84:$Vg,87:$Vh,91:50,93:51,95:52,102:53,103:$Vi,104:54,107:55,109:57,110:$Vj,111:59,112:$Vk,113:$Vl},o($Vm,[2,42]),{53:[1,105],90:$Vp},{21:[1,106],24:107,25:$VI},{21:[1,109],24:110,25:$VI},{19:$Vb,23:$Vc,25:$Vd,28:$Ve,41:66,43:67,49:111,60:$Vf,84:$Vg,87:$Vh,91:50,93:51,95:52,102:53,103:$Vi,104:54,107:55,109:57,110:$Vj,111:59,112:$Vk,113:$Vl},o($V6,[2,46]),o($V6,$V8,{48:$V9}),o($Va,[2,41]),o($V6,[2,48],{90:$Vp}),{22:[1,112],55:[1,113]},o($V6,[2,61],{28:[1,114]}),{30:[1,115]},{19:$Vb,23:$Vc,25:$Vd,28:$Ve,41:66,43:67,60:$Vf,84:$Vg,87:$Vh,91:116,93:51,95:52,102:53,103:$Vi,104:54,107:55,109:57,110:$Vj,111:59,112:$Vk,113:$Vl},{19:$Vb,23:$Vc,25:$Vd,28:$Ve,41:66,43:67,60:$Vf,84:$Vg,87:$Vh,93:117,95:52,102:53,103:$Vi,104:54,107:55,109:57,110:$Vj,111:59,112:$Vk,113:$Vl},{19:$Vb,23:$Vc,25:$Vd,28:$Ve,41:66,43:67,60:$Vf,84:$Vg,87:$Vh,95:118,102:53,103:$Vi,104:54,107:55,109:57,110:$Vj,111:59,112:$Vk,113:$Vl},{19:$Vb,23:$Vc,25:$Vd,28:$Ve,41:66,43:67,60:$Vf,84:$Vg,87:$Vh,95:119,102:53,103:$Vi,104:54,107:55,109:57,110:$Vj,111:59,112:$Vk,113:$Vl},{19:$Vb,23:$Vc,25:$Vd,28:$Ve,41:66,43:67,60:$Vf,84:$Vg,87:$Vh,95:120,102:53,103:$Vi,104:54,107:55,109:57,110:$Vj,111:59,112:$Vk,113:$Vl},{19:$Vb,23:$Vc,25:$Vd,28:$Ve,41:66,43:67,60:$Vf,84:$Vg,87:$Vh,95:121,102:53,103:$Vi,104:54,107:55,109:57,110:$Vj,111:59,112:$Vk,113:$Vl},{19:$Vb,23:$Vc,25:$Vd,28:$Ve,41:66,43:67,60:$Vf,84:$Vg,87:$Vh,95:122,102:53,103:$Vi,104:54,107:55,109:57,110:$Vj,111:59,112:$Vk,113:$Vl},{19:$Vb,23:$Vc,25:$Vd,28:$Ve,41:66,43:67,60:$Vf,84:$Vg,87:$Vh,95:123,102:53,103:$Vi,104:54,107:55,109:57,110:$Vj,111:59,112:$Vk,113:$Vl},{19:$Vb,23:$Vc,25:$Vd,28:$Ve,41:66,43:67,60:$Vf,84:$Vg,87:$Vh,102:124,103:$Vi,104:54,107:55,109:57,110:$Vj,111:59,112:$Vk,113:$Vl},{19:$Vb,23:$Vc,25:$Vd,28:$Ve,41:66,43:67,60:$Vf,84:$Vg,87:$Vh,102:125,103:$Vi,104:54,107:55,109:57,110:$Vj,111:59,112:$Vk,113:$Vl},{19:$Vb,23:$Vc,25:$Vd,28:$Ve,41:66,43:67,60:$Vf,84:$Vg,87:$Vh,103:$Vi,104:126,107:55,109:57,110:$Vj,111:59,112:$Vk,113:$Vl},{19:$Vb,23:$Vc,25:$Vd,28:$Ve,41:66,43:67,60:$Vf,84:$Vg,87:$Vh,103:$Vi,104:127,107:55,109:57,110:$Vj,111:59,112:$Vk,113:$Vl},{19:$Vb,23:$Vc,25:$Vd,28:$Ve,41:66,43:67,60:$Vf,84:$Vg,87:$Vh,103:$Vi,104:128,107:55,109:57,110:$Vj,111:59,112:$Vk,113:$Vl},{19:$Vb,23:$Vc,25:$Vd,28:$Ve,41:66,43:67,60:$Vf,84:$Vg,87:$Vh,103:$Vi,104:129,107:55,109:57,110:$Vj,111:59,112:$Vk,113:$Vl},o($VH,[2,117]),o($VH,[2,119]),{29:[1,130],90:$Vp},{25:[1,131]},{25:[1,132]},{29:[1,133]},o($Vo,[2,54],{90:$Vp}),o($Vm,[2,44]),{22:[1,134]},{20:[1,136],22:[1,135]},o($VJ,[2,20]),{22:[1,137]},{20:[1,139],22:[1,138]},{22:[1,140],90:$Vp},o($Va,[2,58]),{25:[1,141]},{19:$Vb,23:$Vc,25:$Vd,28:$Ve,41:66,43:67,49:143,60:$Vf,63:142,84:$Vg,87:$Vh,91:50,93:51,95:52,102:53,103:$Vi,104:54,107:55,109:57,110:$Vj,111:59,112:$Vk,113:$Vl},o($VK,$VL,{31:144}),o($Vq,[2,97],{92:$Vr}),o($Vs,[2,99],{94:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy}),o($Vz,[2,101],{101:$VA,103:$VB}),o($Vz,[2,102],{101:$VA,103:$VB}),o($Vz,[2,103],{101:$VA,103:$VB}),o($Vz,[2,104],{101:$VA,103:$VB}),o($Vz,[2,105],{101:$VA,103:$VB}),o($Vz,[2,106],{101:$VA,103:$VB}),o($VC,[2,108],{21:$VD,105:$VE,106:$VF}),o($VC,[2,109],{21:$VD,105:$VE,106:$VF}),o($VG,[2,111]),o($VG,[2,112]),o($VG,[2,113]),o($VG,[2,115]),o($VH,[2,126]),{28:[1,145]},{20:$VM},o($VH,[2,92]),o($V0,[2,13]),o($V0,[2,17]),{21:[1,147],25:$VN},o($V0,[2,14]),o($V0,[2,15]),{21:[1,149],25:$VN},o($V1,[2,40]),o($V6,[2,60]),{29:[1,150],55:$VO},o($VP,[2,63],{90:$Vp}),{11:154,12:157,13:155,14:156,19:$Vb,23:$VQ,25:$V2,32:[1,152],33:153,34:158,35:159,36:160,37:161,38:162,39:163,40:164,41:165,42:166,43:167,44:168,45:169,47:17,57:18,58:24,59:$V3,60:$V4,61:$V5,64:171,67:$VR,70:$VS,71:$VT,72:$VU,73:$VV,81:$VW,82:$VX,84:$Vg,85:$VY,86:$VZ,88:$V_},{19:$Vb,23:$Vc,25:$Vd,28:$Ve,29:$V$,41:66,43:67,49:143,60:$Vf,63:183,83:182,84:$Vg,87:$Vh,91:50,93:51,95:52,102:53,103:$Vi,104:54,107:55,109:57,110:$Vj,111:59,112:$Vk,113:$Vl},{25:[1,184]},{22:[1,185]},o($VJ,[2,19]),{22:[1,186]},{22:[1,187]},{19:$Vb,23:$Vc,25:$Vd,28:$Ve,41:66,43:67,49:188,60:$Vf,84:$Vg,87:$Vh,91:50,93:51,95:52,102:53,103:$Vi,104:54,107:55,109:57,110:$Vj,111:59,112:$Vk,113:$Vl},o($V1,[2,21]),o($V01,[2,22]),o($V01,[2,24]),o($V01,[2,25]),o($V01,[2,26]),o($V01,[2,27]),o($V01,[2,28]),o($V01,[2,29]),o($V01,[2,30]),o($V01,[2,31]),o($V01,[2,32]),o($V01,[2,33]),o($V01,[2,34]),{22:[1,189]},o($V01,[2,36]),{22:[1,190]},o($V01,[2,38]),o($V01,[2,39]),{20:[1,191]},o($V01,[2,64],{65:192,66:193,69:195,68:$V11}),{28:[1,196]},{30:[1,197]},{22:[1,198]},{22:[1,199]},{28:[1,200]},{28:[1,201]},{28:[1,202]},{28:[1,203]},{28:[1,204]},{28:[1,205]},{29:[1,206]},{29:[2,90],55:$VO},{28:[1,207]},o($V0,[2,18]),o($V0,[2,16]),o($Va,[2,59]),o($VP,[2,62],{90:$Vp}),o($V01,[2,35]),o($V01,[2,37]),{25:[1,208]},o($V01,[2,65]),o($V01,[2,66],{65:209,69:210,68:$V11}),{30:[1,211],67:[1,212]},o($V21,[2,71]),{19:$Vb,23:$Vc,25:$Vd,28:$Ve,41:66,43:67,49:213,60:$Vf,84:$Vg,87:$Vh,91:50,93:51,95:52,102:53,103:$Vi,104:54,107:55,109:57,110:$Vj,111:59,112:$Vk,113:$Vl},o($VK,$VL,{31:214}),o($V01,[2,86]),o($V01,[2,87]),{25:$V2,58:216,59:[1,215]},{19:$Vb,23:$Vc,25:$Vd,28:$Ve,41:66,43:67,49:217,60:$Vf,84:$Vg,87:$Vh,91:50,93:51,95:52,102:53,103:$Vi,104:54,107:55,109:57,110:$Vj,111:59,112:$Vk,113:$Vl},{29:[1,218]},{87:[1,219]},{87:[1,220]},{19:$Vb,23:$Vc,25:$Vd,28:$Ve,41:66,43:67,49:221,60:$Vf,84:$Vg,87:$Vh,91:50,93:51,95:52,102:53,103:$Vi,104:54,107:55,109:57,110:$Vj,111:59,112:$Vk,113:$Vl},o($VH,[2,88]),{19:$Vb,23:$Vc,25:$Vd,28:$Ve,29:$V$,41:66,43:67,49:143,60:$Vf,63:183,83:222,84:$Vg,87:$Vh,91:50,93:51,95:52,102:53,103:$Vi,104:54,107:55,109:57,110:$Vj,111:59,112:$Vk,113:$Vl},{20:$VM,25:$Vn,62:81},o($V01,[2,67]),o($V21,[2,70]),o($VK,$VL,{31:223}),{28:[1,224]},{29:[1,225],90:$Vp},{11:154,12:157,13:155,14:156,19:$Vb,23:$VQ,25:$V2,32:[1,226],33:153,34:158,35:159,36:160,37:161,38:162,39:163,40:164,41:165,42:166,43:167,44:168,45:169,47:17,57:18,58:24,59:$V3,60:$V4,61:$V5,64:171,67:$VR,70:$VS,71:$VT,72:$VU,73:$VV,81:$VW,82:$VX,84:$Vg,85:$VY,86:$VZ,88:$V_},{25:[1,227]},{22:[1,228]},{29:[1,229],90:$Vp},{22:[1,230]},{29:[1,231],55:[1,232]},{55:[1,233]},{29:[1,234],90:$Vp},{29:[1,235]},{11:154,12:157,13:155,14:156,19:$Vb,23:$VQ,25:$V2,32:[1,236],33:153,34:158,35:159,36:160,37:161,38:162,39:163,40:164,41:165,42:166,43:167,44:168,45:169,47:17,57:18,58:24,59:$V3,60:$V4,61:$V5,64:171,67:$VR,70:$VS,71:$VT,72:$VU,73:$VV,81:$VW,82:$VX,84:$Vg,85:$VY,86:$VZ,88:$V_},{19:$Vb,23:$Vc,25:$Vd,28:$Ve,41:66,43:67,49:237,60:$Vf,84:$Vg,87:$Vh,91:50,93:51,95:52,102:53,103:$Vi,104:54,107:55,109:57,110:$Vj,111:59,112:$Vk,113:$Vl},{30:[1,238]},{70:[1,239]},{48:[1,240]},{19:$Vb,23:$Vc,25:$Vd,28:$Ve,41:66,43:67,49:241,60:$Vf,84:$Vg,87:$Vh,91:50,93:51,95:52,102:53,103:$Vi,104:54,107:55,109:57,110:$Vj,111:59,112:$Vk,113:$Vl},{30:[1,242]},o($V01,[2,93]),{22:[1,243]},{19:$Vb,23:$Vc,25:$Vd,28:$Ve,41:66,43:67,49:143,60:$Vf,63:244,84:$Vg,87:$Vh,91:50,93:51,95:52,102:53,103:$Vi,104:54,107:55,109:57,110:$Vj,111:59,112:$Vk,113:$Vl},{89:[1,245]},{30:[1,246]},o($VH,[2,89]),o($V01,[2,69]),{29:[1,247],90:$Vp},o($VK,$VL,{31:248}),{28:[1,249]},{19:$Vb,23:$Vc,25:$Vd,28:$Ve,41:66,43:67,49:250,60:$Vf,84:$Vg,87:$Vh,91:50,93:51,95:52,102:53,103:$Vi,104:54,107:55,109:57,110:$Vj,111:59,112:$Vk,113:$Vl},{22:[1,251],90:$Vp},{32:[2,81],74:252,75:253,76:254,77:255,78:$V31,80:$V41},o($V01,[2,94]),{29:[1,258],55:$VO},{25:[1,259]},o($VK,$VL,{31:260}),{30:[1,261]},{11:154,12:157,13:155,14:156,19:$Vb,23:$VQ,25:$V2,32:[1,262],33:153,34:158,35:159,36:160,37:161,38:162,39:163,40:164,41:165,42:166,43:167,44:168,45:169,47:17,57:18,58:24,59:$V3,60:$V4,61:$V5,64:171,67:$VR,70:$VS,71:$VT,72:$VU,73:$VV,81:$VW,82:$VX,84:$Vg,85:$VY,86:$VZ,88:$V_},{19:$Vb,23:$Vc,25:$Vd,28:$Ve,41:66,43:67,49:263,60:$Vf,84:$Vg,87:$Vh,91:50,93:51,95:52,102:53,103:$Vi,104:54,107:55,109:57,110:$Vj,111:59,112:$Vk,113:$Vl},{22:[1,264],90:$Vp},{25:$V2,58:265},{32:[1,266]},{32:[2,78],76:267,77:268,78:$V31,80:$V41},{32:[2,80]},o($V51,[2,83]),{79:[1,269]},{19:$Vb,23:$Vc,25:$Vd,28:$Ve,41:66,43:67,49:270,60:$Vf,84:$Vg,87:$Vh,91:50,93:51,95:52,102:53,103:$Vi,104:54,107:55,109:57,110:$Vj,111:59,112:$Vk,113:$Vl},{22:[1,271]},{29:[1,272]},{11:154,12:157,13:155,14:156,19:$Vb,23:$VQ,25:$V2,32:[1,273],33:153,34:158,35:159,36:160,37:161,38:162,39:163,40:164,41:165,42:166,43:167,44:168,45:169,47:17,57:18,58:24,59:$V3,60:$V4,61:$V5,64:171,67:$VR,70:$VS,71:$VT,72:$VU,73:$VV,81:$VW,82:$VX,84:$Vg,85:$VY,86:$VZ,88:$V_},o($VK,$VL,{31:274}),o($V01,[2,73]),{29:[1,275],90:$Vp},{19:$Vb,23:$Vc,25:$Vd,28:$Ve,41:66,43:67,49:276,60:$Vf,84:$Vg,87:$Vh,91:50,93:51,95:52,102:53,103:$Vi,104:54,107:55,109:57,110:$Vj,111:59,112:$Vk,113:$Vl},{29:[1,277]},o($V01,[2,77]),{32:[2,79]},o($V51,[2,82]),o($VK,$VL,{31:278}),{79:[1,279],90:$Vp},o($V01,[2,95]),{22:[1,280]},o($V21,[2,68]),{11:154,12:157,13:155,14:156,19:$Vb,23:$VQ,25:$V2,32:[1,281],33:153,34:158,35:159,36:160,37:161,38:162,39:163,40:164,41:165,42:166,43:167,44:168,45:169,47:17,57:18,58:24,59:$V3,60:$V4,61:$V5,64:171,67:$VR,70:$VS,71:$VT,72:$VU,73:$VV,81:$VW,82:$VX,84:$Vg,85:$VY,86:$VZ,88:$V_},{22:[1,282]},{22:[1,283],90:$Vp},{30:[1,284]},{11:154,12:157,13:155,14:156,19:$Vb,23:$VQ,25:$V2,32:[2,85],33:153,34:158,35:159,36:160,37:161,38:162,39:163,40:164,41:165,42:166,43:167,44:168,45:169,47:17,57:18,58:24,59:$V3,60:$V4,61:$V5,64:171,67:$VR,70:$VS,71:$VT,72:$VU,73:$VV,81:$VW,82:$VX,84:$Vg,85:$VY,86:$VZ,88:$V_},o($V01,$VL,{31:285}),o($V01,[2,96]),o($V21,[2,72]),o($V01,[2,74]),{25:$V2,58:286},o($VK,$VL,{31:287}),o($V51,[2,84],{47:17,57:18,58:24,33:153,11:154,13:155,14:156,12:157,34:158,35:159,36:160,37:161,38:162,39:163,40:164,41:165,42:166,43:167,44:168,45:169,64:171,19:$Vb,23:$VQ,25:$V2,59:$V3,60:$V4,61:$V5,67:$VR,70:$VS,71:$VT,72:$VU,73:$VV,81:$VW,82:$VX,84:$Vg,85:$VY,86:$VZ,88:$V_}),{29:[1,288]},{11:154,12:157,13:155,14:156,19:$Vb,23:$VQ,25:$V2,32:[1,289],33:153,34:158,35:159,36:160,37:161,38:162,39:163,40:164,41:165,42:166,43:167,44:168,45:169,47:17,57:18,58:24,59:$V3,60:$V4,61:$V5,64:171,67:$VR,70:$VS,71:$VT,72:$VU,73:$VV,81:$VW,82:$VX,84:$Vg,85:$VY,86:$VZ,88:$V_},{30:[1,290]},o($V01,[2,76]),o($VK,$VL,{31:291}),{11:154,12:157,13:155,14:156,19:$Vb,23:$VQ,25:$V2,32:[1,292],33:153,34:158,35:159,36:160,37:161,38:162,39:163,40:164,41:165,42:166,43:167,44:168,45:169,47:17,57:18,58:24,59:$V3,60:$V4,61:$V5,64:171,67:$VR,70:$VS,71:$VT,72:$VU,73:$VV,81:$VW,82:$VX,84:$Vg,85:$VY,86:$VZ,88:$V_},o($V01,[2,75])],
defaultActions: {4:[2,1],21:[2,55],22:[2,56],23:[2,57],254:[2,80],267:[2,79]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	// write your code here
	let string = "";
	let char = "";
	let format = [];
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return "PROGRAM";
break;
case 1:return "INCLUDE";
break;
case 2:return "VOID";
break;
case 3:return "MAIN";
break;
case 4:return "INT";
break;
case 5:return "CHAR";
break;
case 6:return "FLOAT";
break;
case 7:return "ARRAY";
break;
case 8:return "CONST";
break;
case 9:return "IF";
break;
case 10:return "ELSE";
break;
case 11:return "SWITCH";
break;
case 12:return "CASE";
break;
case 13:return "BREAK";
break;
case 14:return "DEFAULT";
break;
case 15:return "FOR";
break;
case 16:return "WHILE";
break;
case 17:return "DO";
break;
case 18:return "CONTINUE";
break;
case 19:return "PY";
break;
case 20:return "SCANF";
break;
case 21:return "PRINTF";
break;
case 22:return "CLEAR";
break;
case 23:return "GETCH";
break;
case 24:return "JAVA";
break;
case 25:return "NUMERAL";
break;
case 26:return "PLUS";
break;
case 27:return "MINUS";
break;
case 28:return "TIMES";
break;
case 29:return "POW";
break;
case 30:return "MOD";
break;
case 31:return "LPAREN"
break;
case 32:return "RPAREN";
break;
case 33:return "LBRACE";
break;
case 34:return "RBRACE";
break;
case 35:return "LBRACKET";
break;
case 36:return "RBRACKET";
break;
case 37:return "COLON";
break;
case 38:return "SEMI";
break;
case 39:return "COMMA";
break;
case 40:return "DOT";
break;
case 41:return "EQEQ";
break;
case 42:return "EQUAL";
break;
case 43:return "NEQ";
break;
case 44:return "GREATER_EQ";
break;
case 45:return "SMALLER_EQ";
break;
case 46:return "GREATER";
break;
case 47:return "SMALLER";
break;
case 48:return "AND";
break;
case 49:return "OR";
break;
case 50:return "NOT";
break;
case 51:return "AMP";
break;
case 52:return "DECIMAL";
break;
case 53:return "INTEGER";
break;
case 54:return "ID";
break;
case 55:/* ignore */
break;
case 56:/* ignore */
break;
case 57:return "DIVIDE";
break;
case 58:
									string = "";
									this.pushState("STRING");
								
break;
case 59:
									char = "";
									this.pushState("CHAR");
								
break;
case 60:return "EOF";
break;
case 61:
									console.log(`Error lexico: ${yy_.yytext}`);
									return "INVALID";
								
break;
case 62:
									yy_.yytext = string;
									this.popState();
									return "STRING";
								
break;
case 63:string += yy_.yytext; format.push("%d");
break;
case 64:string += yy_.yytext; format.push("%c");
break;
case 65:string += yy_.yytext; format.push("%f");
break;
case 66:string += yy_.yytext;
break;
case 67:string += "\\t";
break;
case 68:string += "\\n";
break;
case 69:string += "\\\"";
break;
case 70:string += "\\\\";
break;
case 71:string += "%";
break;
case 72:
									yy_.yytext = char;
									this.popState();
									return "CHAR";
								
break;
case 73:char += yy_.yytext;
break;
case 74:char += "\\t";
break;
case 75:char += "\\n";
break;
case 76:char += "\\\'";
break;
case 77:char += "\\\\";
break;
}
},
rules: [/^(?:(%%PROGRAMA\b))/,/^(?:(include\b))/,/^(?:(void\b))/,/^(?:(main\b))/,/^(?:(int\b))/,/^(?:(char\b))/,/^(?:(float\b))/,/^(?:(arreglo\b))/,/^(?:(const\b))/,/^(?:(if\b))/,/^(?:(else\b))/,/^(?:(switch\b))/,/^(?:(case\b))/,/^(?:(break\b))/,/^(?:(default\b))/,/^(?:(for\b))/,/^(?:(while\b))/,/^(?:(do\b))/,/^(?:(continue\b))/,/^(?:(PY\b))/,/^(?:(scanf\b))/,/^(?:(printf\b))/,/^(?:(clrscr\b))/,/^(?:(getch\b))/,/^(?:(JAVA\b))/,/^(?:(#))/,/^(?:(\+))/,/^(?:(-))/,/^(?:(\*))/,/^(?:(\^))/,/^(?:(%))/,/^(?:(\())/,/^(?:(\)))/,/^(?:(\{))/,/^(?:(\}))/,/^(?:(\[))/,/^(?:(\]))/,/^(?:(:))/,/^(?:(;))/,/^(?:(,))/,/^(?:(\.))/,/^(?:(==))/,/^(?:(=))/,/^(?:(!=))/,/^(?:(>=))/,/^(?:(<=))/,/^(?:(>))/,/^(?:(<))/,/^(?:(&&))/,/^(?:(\|\|))/,/^(?:(!))/,/^(?:(&))/,/^(?:(([1-9][0-9]+|[0-9])\.[0-9]+))/,/^(?:([1-9][0-9]+|[0-9]))/,/^(?:([a-zA-Z_]\w*))/,/^(?:((\r|\n|\r\n)|[ \t\f]))/,/^(?:((\/\/[^\r\n]*)|(\/\*(([^*]|\*+[^/*])*)\*+\/)))/,/^(?:(\/))/,/^(?:(["]))/,/^(?:([']))/,/^(?:$)/,/^(?:.)/,/^(?:(["]))/,/^(?:%d[^\n\r\"\\%]*)/,/^(?:%c[^\n\r\"\\%]*)/,/^(?:%f[^\n\r\"\\%]*)/,/^(?:[^\n\r\"\\%]+)/,/^(?:\\t)/,/^(?:\\n)/,/^(?:\\")/,/^(?:\\)/,/^(?:%)/,/^(?:([']))/,/^(?:[^\n\r\'\\]+)/,/^(?:\\t)/,/^(?:\\n)/,/^(?:\\')/,/^(?:\\)/],
conditions: {"CHAR":{"rules":[72,73,74,75,76,77],"inclusive":true},"STRING":{"rules":[62,63,64,65,66,67,68,69,70,71],"inclusive":true},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = program;
exports.Parser = program.Parser;
exports.parse = function () { return program.parse.apply(program, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var program = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[5,16,22,24,25,45,54,55,56],$V1=[5,22,24,25,45,54,55,56],$V2=[1,24],$V3=[1,20],$V4=[1,21],$V5=[1,22],$V6=[1,29],$V7=[21,50],$V8=[5,18,22,24,25,31,45,54,55,56,62,65,66,67,68,73,75,76,77,79,80,81,83],$V9=[1,62],$Va=[1,63],$Vb=[1,59],$Vc=[1,60],$Vd=[1,57],$Ve=[1,58],$Vf=[1,51],$Vg=[1,53],$Vh=[1,55],$Vi=[1,56],$Vj=[1,70],$Vk=[1,72],$Vl=[21,28,50,74,85],$Vm=[1,73],$Vn=[21,28,50,74,85,87],$Vo=[1,74],$Vp=[1,75],$Vq=[1,76],$Vr=[1,77],$Vs=[1,78],$Vt=[1,79],$Vu=[21,28,50,74,85,87,89,91,92,93,94,95],$Vv=[1,80],$Vw=[1,81],$Vx=[21,28,50,74,85,87,89,91,92,93,94,95,96,98],$Vy=[1,82],$Vz=[1,83],$VA=[1,84],$VB=[20,21,28,50,74,85,87,89,91,92,93,94,95,96,98,100,101],$VC=[20,21,28,50,74,85,87,89,91,92,93,94,95,96,98,100,101,103],$VD=[1,93],$VE=[19,21],$VF=[18,22,24,31,54,55,56,62,65,66,67,68,76,77,79,80,81,83],$VG=[2,22],$VH=[1,130],$VI=[1,132],$VJ=[1,135],$VK=[28,50],$VL=[1,153],$VM=[1,165],$VN=[1,155],$VO=[1,156],$VP=[1,159],$VQ=[1,160],$VR=[1,157],$VS=[1,158],$VT=[1,162],$VU=[1,161],$VV=[1,163],$VW=[1,164],$VX=[2,84],$VY=[18,22,24,31,54,55,56,62,65,66,67,68,73,75,76,77,79,80,81,83],$VZ=[1,177],$V_=[18,22,24,31,54,55,56,62,63,65,66,67,68,73,75,76,77,79,80,81,83],$V$=[1,243],$V01=[1,242],$V11=[31,73,75];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"initial":3,"program":4,"EOF":5,"PROGRAM":6,"includes":7,"body":8,"body_opt":9,"const":10,"statement":11,"assigment":12,"class_statement":13,"main":14,"include":15,"NUMERAL":16,"INCLUDE":17,"PY":18,"DOT":19,"TIMES":20,"SEMI":21,"JAVA":22,"dir":23,"ID":24,"VOID":25,"MAIN":26,"LPAREN":27,"RPAREN":28,"LBRACE":29,"main_body":30,"RBRACE":31,"main_b":32,"list_if":33,"while_":34,"do_while_":35,"continue_":36,"break_":37,"for_":38,"switch_":39,"function_call":40,"clear_":41,"getch_":42,"printf_":43,"scanf_":44,"CONST":45,"type":46,"EQUAL":47,"a":48,"list_opt":49,"COMMA":50,"option":51,"list_assign":52,"assign":53,"INT":54,"CHAR":55,"FLOAT":56,"list_id":57,"param":58,"if_":59,"else_":60,"list_else_if":61,"IF":62,"ELSE":63,"else_if":64,"WHILE":65,"DO":66,"FOR":67,"SWITCH":68,"switch_opt":69,"list_case":70,"default_":71,"case_":72,"CASE":73,"COLON":74,"DEFAULT":75,"CONTINUE":76,"BREAK":77,"params":78,"GETCH":79,"CLEAR":80,"PRINTF":81,"STRING":82,"SCANF":83,"AMP":84,"OR":85,"b":86,"AND":87,"c":88,"EQEQ":89,"d":90,"NEQ":91,"GREATER":92,"GREATER_EQ":93,"SMALLER":94,"SMALLER_EQ":95,"PLUS":96,"e":97,"MINUS":98,"f":99,"DIVIDE":100,"MOD":101,"g":102,"POW":103,"h":104,"NOT":105,"i":106,"INTEGER":107,"DECIMAL":108,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"PROGRAM",16:"NUMERAL",17:"INCLUDE",18:"PY",19:"DOT",20:"TIMES",21:"SEMI",22:"JAVA",24:"ID",25:"VOID",26:"MAIN",27:"LPAREN",28:"RPAREN",29:"LBRACE",31:"RBRACE",45:"CONST",47:"EQUAL",50:"COMMA",54:"INT",55:"CHAR",56:"FLOAT",62:"IF",63:"ELSE",65:"WHILE",66:"DO",67:"FOR",68:"SWITCH",73:"CASE",74:"COLON",75:"DEFAULT",76:"CONTINUE",77:"BREAK",79:"GETCH",80:"CLEAR",81:"PRINTF",82:"STRING",83:"SCANF",84:"AMP",85:"OR",87:"AND",89:"EQEQ",91:"NEQ",92:"GREATER",93:"GREATER_EQ",94:"SMALLER",95:"SMALLER_EQ",96:"PLUS",98:"MINUS",100:"DIVIDE",101:"MOD",103:"POW",105:"NOT",107:"INTEGER",108:"DECIMAL"},
productions_: [0,[3,2],[4,3],[8,2],[8,0],[9,1],[9,1],[9,1],[9,1],[9,1],[7,2],[7,0],[15,6],[15,6],[15,6],[15,8],[15,6],[15,8],[23,3],[23,1],[14,7],[30,2],[30,0],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,2],[32,1],[32,1],[32,1],[32,1],[10,6],[11,3],[49,3],[49,1],[51,3],[51,1],[12,2],[52,3],[52,1],[53,3],[46,1],[46,1],[46,1],[13,5],[13,8],[57,3],[57,1],[58,3],[58,1],[33,1],[33,2],[33,2],[33,3],[59,7],[60,4],[61,2],[61,1],[64,8],[34,7],[35,9],[38,14],[38,11],[39,7],[69,1],[69,2],[69,1],[69,0],[70,2],[70,1],[72,4],[71,3],[36,2],[37,2],[40,6],[40,8],[78,1],[78,0],[42,4],[41,4],[43,5],[43,7],[44,8],[48,3],[48,1],[86,3],[86,1],[88,3],[88,3],[88,3],[88,3],[88,3],[88,3],[88,1],[90,3],[90,3],[90,1],[97,3],[97,3],[97,3],[97,1],[99,3],[99,1],[102,2],[102,1],[104,2],[104,1],[106,1],[106,1],[106,1],[106,1],[106,1],[106,3],[106,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2: case 71: case 83: case 91: case 93: case 100: case 103: case 107: case 109: case 111: case 113:
 this.$ = $$[$0]; 
break;
case 3: case 21:
 this.$ = [...$$[$0-1], ...$$[$0]]; 
break;
case 4: case 22: case 74:
 this.$ = []; 
break;
case 5: case 8: case 9: case 19: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 34: case 35: case 36: case 37: case 43: case 54: case 73:
 this.$ = [$$[$0]]; 
break;
case 6: case 7: case 23: case 24:
 this.$ = [...$$[$0]]; 
break;
case 18: case 40: case 45: case 53: case 55:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 20:
 this.$ = new yy.Main(this._$.first_line + yy.line, this._$.first_column, $$[$0-1]); 
break;
case 33:
 this.$ = [$$[$0-1]]; 
break;
case 38:
 this.$ = new yy.Statement(this._$.first_line + yy.line, this._$.first_column, true, $$[$0-4], $$[$0-3], $$[$0-1]); 
break;
case 39:

				this.$ = [];
				for(const element of $$[$0-1]) {
					if(element.length === 1) {
						const tmp = new yy.Statement(this._$.first_line + yy.line, this._$.first_column, false, $$[$0-2], element[0], null);
						this.$.push(tmp);
					} else if(element.length === 2) {
						const tmp = new yy.Statement(this._$.first_line + yy.line, this._$.first_column, false, $$[$0-2], element[0], element[1]);
						this.$.push(tmp);
					}
				}
			
break;
case 41: case 46: case 56: case 64: case 76:
 this.$ = []; this.$.push($$[$0]); 
break;
case 42:
 this.$ = [$$[$0-2], $$[$0]]; 
break;
case 44: case 119:
 this.$ = $$[$0-1]; 
break;
case 47:
 this.$ = new yy.Assignment(this._$.first_line + yy.line, this._$.first_column, $$[$0-2], $$[$0]); 
break;
case 48:
 this.$ = yy.OperationType.INT; 
break;
case 49:
 this.$ = yy.OperationType.CHAR; 
break;
case 50:
 this.$ = yy.OperationType.FLOAT; 
break;
case 51:
 this.$ = new yy.CreateClass(this._$.first_line + yy.line, this._$.first_column, $$[$0-2], $$[$0-1], []); 
break;
case 52:
 this.$ = new yy.CreateClass(this._$.first_line + yy.line, this._$.first_column, $$[$0-5], [$$[$0-4]], $$[$0-2]); 
break;
case 57:
 this.$ = new yy.IfInstruction(this._$.first_line + yy.line, this._$.first_column, [$$[$0]]); 
break;
case 58:
 this.$ = new yy.IfInstruction(this._$.first_line + yy.line, this._$.first_column, [$$[$0-1], $$[$0]]); 
break;
case 59:
 this.$ = new yy.IfInstruction(this._$.first_line + yy.line, this._$.first_column, [$$[$0-1], ...$$[$0]]); 
break;
case 60:
 this.$ = new yy.IfInstruction(this._$.first_line + yy.line, this._$.first_column, [$$[$0-2], ...$$[$0-1], $$[$0]]); 
break;
case 61:
 this.$ = new yy.If(this._$.first_line + yy.line, this._$.first_column, "IF", $$[$0-1], $$[$0-4]); 
break;
case 62:
 this.$ = new yy.If(this._$.first_line + yy.line, this._$.first_column, "ELSE", $$[$0-1], null); 
break;
case 63: case 75:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 65:
 this.$ = new yy.If(this._$.first_line + yy.line, this._$.first_column, "ELSE_IF", $$[$0-1], $$[$0-4]); 
break;
case 66:
 this.$ = new yy.While(this._$.first_line + yy.line, this._$.first_column, $$[$0-4], $$[$0-1]); 
break;
case 67:
 this.$ = new yy.DoWhile(this._$.first_line + yy.line, this._$.first_column, $$[$0-2], $$[$0-6]); 
break;
case 68:

				const tmp_s = new yy.Statement(this._$.first_line + yy.line, this._$.first_column, false, yy.OperationType.INT, $$[$0-10], $$[$0-8]);
				this.$ = new yy.For(this._$.first_line + yy.line, this._$.first_column, $$[$0-6], $$[$0-4], $$[$0-1], tmp_s, null);
			
break;
case 69:
 this.$ = new yy.For(this._$.first_line + yy.line, this._$.first_column, $$[$0-6], $$[$0-4], $$[$0-1], null, $$[$0-8]); 
break;
case 70:
 this.$ = new yy.Switch(this._$.first_line + yy.line, this._$.first_column, $$[$0-4], $$[$0-1]); 
break;
case 72:
 this.$ = [...$$[$0-1], $$[$0]]; 
break;
case 77:
 this.$ = new yy.Case(this._$.first_line + yy.line, this._$.first_column, $$[$0], $$[$0-2]); 
break;
case 78:
 this.$ = new yy.Case(this._$.first_line + yy.line, this._$.first_column, $$[$0], null); 
break;
case 79:
 this.$ = new yy.Continue(this._$.first_line + yy.line, this._$.first_column); 
break;
case 80:
 this.$ = new yy.Break(this._$.first_line + yy.line, this._$.first_column); 
break;
case 81:
 this.$ = new yy.FunctionCall(this._$.first_line + yy.line, this._$.first_column, "PYTHON", "", $$[$0-3], $$[$0-1]); 
break;
case 82:
 this.$ = new yy.FunctionCall(this._$.first_line + yy.line, this._$.first_column, "JAVA", $$[$0-5], $$[$0-3], $$[$0-1]); 
break;
case 84:
this.$ = []; 
break;
case 85:
 this.$ = new yy.Getch(this._$.first_line + yy.line, this._$.first_column, $$[$0-3]); 
break;
case 86:
 this.$ = new yy.Clear(this._$.first_line + yy.line, this._$.first_column); 
break;
case 87:
 this.$ = new yy.Printf(this._$.first_line + yy.line, this._$.first_column, $$[$0-2], [...format], null); format = []; 
break;
case 88:
 this.$ = new yy.Printf(this._$.first_line + yy.line, this._$.first_column, $$[$0-4], [...format], $$[$0-2]); format = []; 
break;
case 89:
 this.$ = new yy.Scanf(this._$.first_line + yy.line, this._$.first_column, $$[$0-5], $$[$0-2], format); format = []; 
break;
case 90:
 this.$ = new yy.Operation(this._$.first_line + yy.line, this._$.first_column, yy.OperationType.OR, $$[$0-2], $$[$0]); 
break;
case 92:
 this.$ = new yy.Operation(this._$.first_line + yy.line, this._$.first_column, yy.OperationType.AND, $$[$0-2], $$[$0]); 
break;
case 94:
 this.$ = new yy.Operation(this._$.first_line + yy.line, this._$.first_column, yy.OperationType.EQEQ, $$[$0-2], $$[$0]); 
break;
case 95:
 this.$ = new yy.Operation(this._$.first_line + yy.line, this._$.first_column, yy.OperationType.NEQ, $$[$0-2], $$[$0]); 
break;
case 96:
 this.$ = new yy.Operation(this._$.first_line + yy.line, this._$.first_column, yy.OperationType.GREATER, $$[$0-2], $$[$0]); 
break;
case 97:
 this.$ = new yy.Operation(this._$.first_line + yy.line, this._$.first_column, yy.OperationType.GREATER_EQ, $$[$0-2], $$[$0]); 
break;
case 98:
 this.$ = new yy.Operation(this._$.first_line + yy.line, this._$.first_column, yy.OperationType.SMALLER, $$[$0-2], $$[$0]); 
break;
case 99:
 this.$ = new yy.Operation(this._$.first_line + yy.line, this._$.first_column, yy.OperationType.SMALLER_EQ, $$[$0-2], $$[$0]); 
break;
case 101:
 this.$ = new yy.Operation(this._$.first_line + yy.line, this._$.first_column, yy.OperationType.SUM, $$[$0-2], $$[$0]); 
break;
case 102:
 this.$ = new yy.Operation(this._$.first_line + yy.line, this._$.first_column, yy.OperationType.SUB, $$[$0-2], $$[$0]); 
break;
case 104:
 this.$ = new yy.Operation(this._$.first_line + yy.line, this._$.first_column, yy.OperationType.MUL, $$[$0-2], $$[$0]); 
break;
case 105:
 this.$ = new yy.Operation(this._$.first_line + yy.line, this._$.first_column, yy.OperationType.DIV, $$[$0-2], $$[$0]); 
break;
case 106:
 this.$ = new yy.Operation(this._$.first_line + yy.line, this._$.first_column, yy.OperationType.MOD, $$[$0-2], $$[$0]); 
break;
case 108:
 this.$ = new yy.Operation(this._$.first_line + yy.line, this._$.first_column, yy.OperationType.POW, $$[$0-2], $$[$0]); 
break;
case 110:
 this.$ = new yy.Operation(this._$.first_line + yy.line, this._$.first_column, yy.OperationType.UMINUS, $$[$0], null); 
break;
case 112:
 this.$ = new yy.Operation(this._$.first_line + yy.line, this._$.first_column, yy.OperationType.NOT, $$[$0], null); 
break;
case 114:
 const tmp = new yy.Variable(yy.OperationType.INT, null, $$[$0]); this.$ = new yy.Operation(this._$.first_line + yy.line, this._$.first_column, yy.OperationType.INT, tmp); 
break;
case 115:
 const tmp1 = new yy.Variable(yy.OperationType.FLOAT, null, $$[$0]); this.$ = new yy.Operation(this._$.first_line + yy.line, this._$.first_column, yy.OperationType.FLOAT, tmp1); 
break;
case 116:
 const tmp2 = new yy.Variable(yy.OperationType.CHAR, null, $$[$0]); this.$ = new yy.Operation(this._$.first_line + yy.line, this._$.first_column, yy.OperationType.CHAR, tmp2); 
break;
case 117:
 const tmp3 = new yy.Variable(yy.OperationType.STRING, null, $$[$0]); this.$ = new yy.Operation(this._$.first_line + yy.line, this._$.first_column, yy.OperationType.STRING, tmp3); 
break;
case 118:
 const tmp4 = new yy.Variable(yy.OperationType.ID, $$[$0], null); this.$ = new yy.Operation(this._$.first_line + yy.line, this._$.first_column, yy.OperationType.ID, tmp4); 
break;
case 120:
 this.$ = new yy.Operation(this._$.first_line + yy.line, this._$.first_column, $$[$0]); 
break;
}
},
table: [{3:1,4:2,6:[1,3]},{1:[3]},{5:[1,4]},o($V0,[2,11],{7:5}),{1:[2,1]},o($V1,[2,4],{8:6,15:7,16:[1,8]}),{5:[2,2],9:9,10:10,11:11,12:12,13:13,14:14,22:[1,18],24:$V2,25:[1,19],45:[1,15],46:16,52:17,53:23,54:$V3,55:$V4,56:$V5},o($V0,[2,10]),{17:[1,25]},o($V1,[2,3]),o($V1,[2,5]),o($V1,[2,6]),o($V1,[2,7]),o($V1,[2,8]),o($V1,[2,9]),{46:26,54:$V3,55:$V4,56:$V5},{24:$V6,49:27,51:28},{21:[1,30],50:[1,31]},{19:[1,32]},{26:[1,33]},{24:[2,48]},{24:[2,49]},{24:[2,50]},o($V7,[2,46]),{47:[1,34]},{18:[1,35],22:[1,36]},{24:[1,37]},{21:[1,38],50:[1,39]},o($V7,[2,41]),o($V7,[2,43],{47:[1,40]}),o($V8,[2,44]),{24:$V2,53:41},{24:[1,42]},{27:[1,43]},{18:$V9,22:$Va,24:$Vb,27:$Vc,40:61,48:44,55:$Vd,82:$Ve,86:45,88:46,90:47,97:48,98:$Vf,99:49,102:50,104:52,105:$Vg,106:54,107:$Vh,108:$Vi},{19:[1,64]},{19:[1,65]},{47:[1,66]},o($V8,[2,39]),{24:$V6,51:67},{18:$V9,22:$Va,24:$Vb,27:$Vc,40:61,48:68,55:$Vd,82:$Ve,86:45,88:46,90:47,97:48,98:$Vf,99:49,102:50,104:52,105:$Vg,106:54,107:$Vh,108:$Vi},o($V7,[2,45]),{24:$Vj,57:69},{28:[1,71]},o([21,28,50],[2,47],{85:$Vk}),o($Vl,[2,91],{87:$Vm}),o($Vn,[2,93],{89:$Vo,91:$Vp,92:$Vq,93:$Vr,94:$Vs,95:$Vt}),o($Vu,[2,100],{96:$Vv,98:$Vw}),o($Vx,[2,103],{20:$Vy,100:$Vz,101:$VA}),o($VB,[2,107]),o($VB,[2,109],{103:[1,85]}),{18:$V9,22:$Va,24:$Vb,27:$Vc,40:61,55:$Vd,82:$Ve,104:86,105:$Vg,106:54,107:$Vh,108:$Vi},o($VC,[2,111]),{18:$V9,22:$Va,24:$Vb,27:$Vc,40:61,55:$Vd,82:$Ve,104:87,105:$Vg,106:54,107:$Vh,108:$Vi},o($VC,[2,113]),o($VC,[2,114]),o($VC,[2,115]),o($VC,[2,116]),o($VC,[2,117]),o($VC,[2,118]),{18:$V9,22:$Va,24:$Vb,27:$Vc,40:61,48:88,55:$Vd,82:$Ve,86:45,88:46,90:47,97:48,98:$Vf,99:49,102:50,104:52,105:$Vg,106:54,107:$Vh,108:$Vi},o($VC,[2,120]),{19:[1,89]},{19:[1,90]},{20:[1,91],23:92,24:$VD},{20:[1,94],23:95,24:$VD},{18:$V9,22:$Va,24:$Vb,27:$Vc,40:61,48:96,55:$Vd,82:$Ve,86:45,88:46,90:47,97:48,98:$Vf,99:49,102:50,104:52,105:$Vg,106:54,107:$Vh,108:$Vi},o($V7,[2,40]),o($V7,[2,42],{85:$Vk}),{21:[1,97],50:[1,98]},o($V7,[2,54],{27:[1,99]}),{29:[1,100]},{18:$V9,22:$Va,24:$Vb,27:$Vc,40:61,55:$Vd,82:$Ve,86:101,88:46,90:47,97:48,98:$Vf,99:49,102:50,104:52,105:$Vg,106:54,107:$Vh,108:$Vi},{18:$V9,22:$Va,24:$Vb,27:$Vc,40:61,55:$Vd,82:$Ve,88:102,90:47,97:48,98:$Vf,99:49,102:50,104:52,105:$Vg,106:54,107:$Vh,108:$Vi},{18:$V9,22:$Va,24:$Vb,27:$Vc,40:61,55:$Vd,82:$Ve,90:103,97:48,98:$Vf,99:49,102:50,104:52,105:$Vg,106:54,107:$Vh,108:$Vi},{18:$V9,22:$Va,24:$Vb,27:$Vc,40:61,55:$Vd,82:$Ve,90:104,97:48,98:$Vf,99:49,102:50,104:52,105:$Vg,106:54,107:$Vh,108:$Vi},{18:$V9,22:$Va,24:$Vb,27:$Vc,40:61,55:$Vd,82:$Ve,90:105,97:48,98:$Vf,99:49,102:50,104:52,105:$Vg,106:54,107:$Vh,108:$Vi},{18:$V9,22:$Va,24:$Vb,27:$Vc,40:61,55:$Vd,82:$Ve,90:106,97:48,98:$Vf,99:49,102:50,104:52,105:$Vg,106:54,107:$Vh,108:$Vi},{18:$V9,22:$Va,24:$Vb,27:$Vc,40:61,55:$Vd,82:$Ve,90:107,97:48,98:$Vf,99:49,102:50,104:52,105:$Vg,106:54,107:$Vh,108:$Vi},{18:$V9,22:$Va,24:$Vb,27:$Vc,40:61,55:$Vd,82:$Ve,90:108,97:48,98:$Vf,99:49,102:50,104:52,105:$Vg,106:54,107:$Vh,108:$Vi},{18:$V9,22:$Va,24:$Vb,27:$Vc,40:61,55:$Vd,82:$Ve,97:109,98:$Vf,99:49,102:50,104:52,105:$Vg,106:54,107:$Vh,108:$Vi},{18:$V9,22:$Va,24:$Vb,27:$Vc,40:61,55:$Vd,82:$Ve,97:110,98:$Vf,99:49,102:50,104:52,105:$Vg,106:54,107:$Vh,108:$Vi},{18:$V9,22:$Va,24:$Vb,27:$Vc,40:61,55:$Vd,82:$Ve,98:$Vf,99:111,102:50,104:52,105:$Vg,106:54,107:$Vh,108:$Vi},{18:$V9,22:$Va,24:$Vb,27:$Vc,40:61,55:$Vd,82:$Ve,98:$Vf,99:112,102:50,104:52,105:$Vg,106:54,107:$Vh,108:$Vi},{18:$V9,22:$Va,24:$Vb,27:$Vc,40:61,55:$Vd,82:$Ve,98:$Vf,99:113,102:50,104:52,105:$Vg,106:54,107:$Vh,108:$Vi},{18:$V9,22:$Va,24:$Vb,27:$Vc,40:61,55:$Vd,82:$Ve,98:$Vf,99:114,102:50,104:52,105:$Vg,106:54,107:$Vh,108:$Vi},o($VC,[2,110]),o($VC,[2,112]),{28:[1,115],85:$Vk},{24:[1,116]},{24:[1,117]},{21:[1,118]},{19:[1,120],21:[1,119]},o($VE,[2,19]),{21:[1,121]},{19:[1,123],21:[1,122]},{21:[1,124],85:$Vk},o($V8,[2,51]),{24:[1,125]},{18:$V9,22:$Va,24:$Vb,27:$Vc,40:61,48:127,55:$Vd,58:126,82:$Ve,86:45,88:46,90:47,97:48,98:$Vf,99:49,102:50,104:52,105:$Vg,106:54,107:$Vh,108:$Vi},o($VF,$VG,{30:128}),o($Vl,[2,90],{87:$Vm}),o($Vn,[2,92],{89:$Vo,91:$Vp,92:$Vq,93:$Vr,94:$Vs,95:$Vt}),o($Vu,[2,94],{96:$Vv,98:$Vw}),o($Vu,[2,95],{96:$Vv,98:$Vw}),o($Vu,[2,96],{96:$Vv,98:$Vw}),o($Vu,[2,97],{96:$Vv,98:$Vw}),o($Vu,[2,98],{96:$Vv,98:$Vw}),o($Vu,[2,99],{96:$Vv,98:$Vw}),o($Vx,[2,101],{20:$Vy,100:$Vz,101:$VA}),o($Vx,[2,102],{20:$Vy,100:$Vz,101:$VA}),o($VB,[2,104]),o($VB,[2,105]),o($VB,[2,106]),o($VB,[2,108]),o($VC,[2,119]),{27:[1,129]},{19:$VH},o($V0,[2,12]),o($V0,[2,16]),{20:[1,131],24:$VI},o($V0,[2,13]),o($V0,[2,14]),{20:[1,133],24:$VI},o($V1,[2,38]),o($V7,[2,53]),{28:[1,134],50:$VJ},o($VK,[2,56],{85:$Vk}),{11:138,12:139,13:140,18:$V9,22:$VL,24:$V2,31:[1,136],32:137,33:141,34:142,35:143,36:144,37:145,38:146,39:147,40:148,41:149,42:150,43:151,44:152,46:16,52:17,53:23,54:$V3,55:$V4,56:$V5,59:154,62:$VM,65:$VN,66:$VO,67:$VP,68:$VQ,76:$VR,77:$VS,79:$VT,80:$VU,81:$VV,83:$VW},{18:$V9,22:$Va,24:$Vb,27:$Vc,28:$VX,40:61,48:127,55:$Vd,58:167,78:166,82:$Ve,86:45,88:46,90:47,97:48,98:$Vf,99:49,102:50,104:52,105:$Vg,106:54,107:$Vh,108:$Vi},{24:[1,168]},{21:[1,169]},o($VE,[2,18]),{21:[1,170]},{21:[1,171]},{18:$V9,22:$Va,24:$Vb,27:$Vc,40:61,48:172,55:$Vd,82:$Ve,86:45,88:46,90:47,97:48,98:$Vf,99:49,102:50,104:52,105:$Vg,106:54,107:$Vh,108:$Vi},o($V1,[2,20]),o($VY,[2,21]),o($VY,[2,23]),o($VY,[2,24]),o($VY,[2,25]),o($VY,[2,26]),o($VY,[2,27]),o($VY,[2,28]),o($VY,[2,29]),o($VY,[2,30]),o($VY,[2,31]),o($VY,[2,32]),{21:[1,173]},o($VY,[2,34]),o($VY,[2,35]),o($VY,[2,36]),o($VY,[2,37]),{19:[1,174]},o($VY,[2,57],{60:175,61:176,64:178,63:$VZ}),{27:[1,179]},{29:[1,180]},{21:[1,181]},{21:[1,182]},{27:[1,183]},{27:[1,184]},{27:[1,185]},{27:[1,186]},{27:[1,187]},{27:[1,188]},{27:[1,189]},{28:[1,190]},{28:[2,83],50:$VJ},{27:[1,191]},o($V0,[2,17]),o($V0,[2,15]),o($V8,[2,52]),o($VK,[2,55],{85:$Vk}),o($VY,[2,33]),{24:[1,192]},o($VY,[2,58]),o($VY,[2,59],{60:193,64:194,63:$VZ}),{29:[1,195],62:[1,196]},o($V_,[2,64]),{18:$V9,22:$Va,24:$Vb,27:$Vc,40:61,48:197,55:$Vd,82:$Ve,86:45,88:46,90:47,97:48,98:$Vf,99:49,102:50,104:52,105:$Vg,106:54,107:$Vh,108:$Vi},o($VF,$VG,{30:198}),o($VY,[2,79]),o($VY,[2,80]),{24:$V2,53:200,54:[1,199]},{18:$V9,22:$Va,24:$Vb,27:$Vc,40:61,48:201,55:$Vd,82:$Ve,86:45,88:46,90:47,97:48,98:$Vf,99:49,102:50,104:52,105:$Vg,106:54,107:$Vh,108:$Vi},{28:[1,202]},{28:[1,203]},{82:[1,204]},{82:[1,205]},{18:$V9,22:$Va,24:$Vb,27:$Vc,40:61,48:206,55:$Vd,82:$Ve,86:45,88:46,90:47,97:48,98:$Vf,99:49,102:50,104:52,105:$Vg,106:54,107:$Vh,108:$Vi},o($VC,[2,81]),{18:$V9,22:$Va,24:$Vb,27:$Vc,28:$VX,40:61,48:127,55:$Vd,58:167,78:207,82:$Ve,86:45,88:46,90:47,97:48,98:$Vf,99:49,102:50,104:52,105:$Vg,106:54,107:$Vh,108:$Vi},{19:$VH,24:$Vj,57:69},o($VY,[2,60]),o($V_,[2,63]),o($VF,$VG,{30:208}),{27:[1,209]},{28:[1,210],85:$Vk},{11:138,12:139,13:140,18:$V9,22:$VL,24:$V2,31:[1,211],32:137,33:141,34:142,35:143,36:144,37:145,38:146,39:147,40:148,41:149,42:150,43:151,44:152,46:16,52:17,53:23,54:$V3,55:$V4,56:$V5,59:154,62:$VM,65:$VN,66:$VO,67:$VP,68:$VQ,76:$VR,77:$VS,79:$VT,80:$VU,81:$VV,83:$VW},{24:[1,212]},{21:[1,213]},{28:[1,214],85:$Vk},{21:[1,215]},{21:[1,216]},{28:[1,217],50:[1,218]},{50:[1,219]},{28:[1,220],85:$Vk},{28:[1,221]},{11:138,12:139,13:140,18:$V9,22:$VL,24:$V2,31:[1,222],32:137,33:141,34:142,35:143,36:144,37:145,38:146,39:147,40:148,41:149,42:150,43:151,44:152,46:16,52:17,53:23,54:$V3,55:$V4,56:$V5,59:154,62:$VM,65:$VN,66:$VO,67:$VP,68:$VQ,76:$VR,77:$VS,79:$VT,80:$VU,81:$VV,83:$VW},{18:$V9,22:$Va,24:$Vb,27:$Vc,40:61,48:223,55:$Vd,82:$Ve,86:45,88:46,90:47,97:48,98:$Vf,99:49,102:50,104:52,105:$Vg,106:54,107:$Vh,108:$Vi},{29:[1,224]},{65:[1,225]},{47:[1,226]},{18:$V9,22:$Va,24:$Vb,27:$Vc,40:61,48:227,55:$Vd,82:$Ve,86:45,88:46,90:47,97:48,98:$Vf,99:49,102:50,104:52,105:$Vg,106:54,107:$Vh,108:$Vi},{29:[1,228]},o($VY,[2,86]),o($VY,[2,85]),{21:[1,229]},{18:$V9,22:$Va,24:$Vb,27:$Vc,40:61,48:127,55:$Vd,58:230,82:$Ve,86:45,88:46,90:47,97:48,98:$Vf,99:49,102:50,104:52,105:$Vg,106:54,107:$Vh,108:$Vi},{84:[1,231]},{29:[1,232]},o($VC,[2,82]),o($VY,[2,62]),{28:[1,233],85:$Vk},o($VF,$VG,{30:234}),{27:[1,235]},{18:$V9,22:$Va,24:$Vb,27:$Vc,40:61,48:236,55:$Vd,82:$Ve,86:45,88:46,90:47,97:48,98:$Vf,99:49,102:50,104:52,105:$Vg,106:54,107:$Vh,108:$Vi},{21:[1,237],85:$Vk},{31:[2,74],69:238,70:239,71:240,72:241,73:$V$,75:$V01},o($VY,[2,87]),{28:[1,244],50:$VJ},{24:[1,245]},o($VF,$VG,{30:246}),{29:[1,247]},{11:138,12:139,13:140,18:$V9,22:$VL,24:$V2,31:[1,248],32:137,33:141,34:142,35:143,36:144,37:145,38:146,39:147,40:148,41:149,42:150,43:151,44:152,46:16,52:17,53:23,54:$V3,55:$V4,56:$V5,59:154,62:$VM,65:$VN,66:$VO,67:$VP,68:$VQ,76:$VR,77:$VS,79:$VT,80:$VU,81:$VV,83:$VW},{18:$V9,22:$Va,24:$Vb,27:$Vc,40:61,48:249,55:$Vd,82:$Ve,86:45,88:46,90:47,97:48,98:$Vf,99:49,102:50,104:52,105:$Vg,106:54,107:$Vh,108:$Vi},{21:[1,250],85:$Vk},{24:$V2,53:251},{31:[1,252]},{31:[2,71],71:253,72:254,73:$V$,75:$V01},{31:[2,73]},o($V11,[2,76]),{74:[1,255]},{18:$V9,22:$Va,24:$Vb,27:$Vc,40:61,48:256,55:$Vd,82:$Ve,86:45,88:46,90:47,97:48,98:$Vf,99:49,102:50,104:52,105:$Vg,106:54,107:$Vh,108:$Vi},{21:[1,257]},{28:[1,258]},{11:138,12:139,13:140,18:$V9,22:$VL,24:$V2,31:[1,259],32:137,33:141,34:142,35:143,36:144,37:145,38:146,39:147,40:148,41:149,42:150,43:151,44:152,46:16,52:17,53:23,54:$V3,55:$V4,56:$V5,59:154,62:$VM,65:$VN,66:$VO,67:$VP,68:$VQ,76:$VR,77:$VS,79:$VT,80:$VU,81:$VV,83:$VW},o($VF,$VG,{30:260}),o($VY,[2,66]),{28:[1,261],85:$Vk},{18:$V9,22:$Va,24:$Vb,27:$Vc,40:61,48:262,55:$Vd,82:$Ve,86:45,88:46,90:47,97:48,98:$Vf,99:49,102:50,104:52,105:$Vg,106:54,107:$Vh,108:$Vi},{28:[1,263]},o($VY,[2,70]),{31:[2,72]},o($V11,[2,75]),o($VF,$VG,{30:264}),{74:[1,265],85:$Vk},o($VY,[2,88]),{21:[1,266]},o($V_,[2,61]),{11:138,12:139,13:140,18:$V9,22:$VL,24:$V2,31:[1,267],32:137,33:141,34:142,35:143,36:144,37:145,38:146,39:147,40:148,41:149,42:150,43:151,44:152,46:16,52:17,53:23,54:$V3,55:$V4,56:$V5,59:154,62:$VM,65:$VN,66:$VO,67:$VP,68:$VQ,76:$VR,77:$VS,79:$VT,80:$VU,81:$VV,83:$VW},{21:[1,268]},{21:[1,269],85:$Vk},{29:[1,270]},{11:138,12:139,13:140,18:$V9,22:$VL,24:$V2,31:[2,78],32:137,33:141,34:142,35:143,36:144,37:145,38:146,39:147,40:148,41:149,42:150,43:151,44:152,46:16,52:17,53:23,54:$V3,55:$V4,56:$V5,59:154,62:$VM,65:$VN,66:$VO,67:$VP,68:$VQ,76:$VR,77:$VS,79:$VT,80:$VU,81:$VV,83:$VW},o($VY,$VG,{30:271}),o($VY,[2,89]),o($V_,[2,65]),o($VY,[2,67]),{24:$V2,53:272},o($VF,$VG,{30:273}),o($V11,[2,77],{46:16,52:17,53:23,32:137,11:138,12:139,13:140,33:141,34:142,35:143,36:144,37:145,38:146,39:147,40:148,41:149,42:150,43:151,44:152,59:154,18:$V9,22:$VL,24:$V2,54:$V3,55:$V4,56:$V5,62:$VM,65:$VN,66:$VO,67:$VP,68:$VQ,76:$VR,77:$VS,79:$VT,80:$VU,81:$VV,83:$VW}),{28:[1,274]},{11:138,12:139,13:140,18:$V9,22:$VL,24:$V2,31:[1,275],32:137,33:141,34:142,35:143,36:144,37:145,38:146,39:147,40:148,41:149,42:150,43:151,44:152,46:16,52:17,53:23,54:$V3,55:$V4,56:$V5,59:154,62:$VM,65:$VN,66:$VO,67:$VP,68:$VQ,76:$VR,77:$VS,79:$VT,80:$VU,81:$VV,83:$VW},{29:[1,276]},o($VY,[2,69]),o($VF,$VG,{30:277}),{11:138,12:139,13:140,18:$V9,22:$VL,24:$V2,31:[1,278],32:137,33:141,34:142,35:143,36:144,37:145,38:146,39:147,40:148,41:149,42:150,43:151,44:152,46:16,52:17,53:23,54:$V3,55:$V4,56:$V5,59:154,62:$VM,65:$VN,66:$VO,67:$VP,68:$VQ,76:$VR,77:$VS,79:$VT,80:$VU,81:$VV,83:$VW},o($VY,[2,68])],
defaultActions: {4:[2,1],20:[2,48],21:[2,49],22:[2,50],240:[2,73],253:[2,72]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	// write your code here
	let string = "";
	let char = "";
	let format = [];
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return "PROGRAM";
break;
case 1:return "INCLUDE";
break;
case 2:return "VOID";
break;
case 3:return "MAIN";
break;
case 4:return "INT";
break;
case 5:return "CHAR";
break;
case 6:return "FLOAT";
break;
case 7:return "ARRAY";
break;
case 8:return "CONST";
break;
case 9:return "IF";
break;
case 10:return "ELSE";
break;
case 11:return "SWITCH";
break;
case 12:return "CASE";
break;
case 13:return "BREAK";
break;
case 14:return "DEFAULT";
break;
case 15:return "FOR";
break;
case 16:return "WHILE";
break;
case 17:return "DO";
break;
case 18:return "CONTINUE";
break;
case 19:return "PY";
break;
case 20:return "SCANF";
break;
case 21:return "PRINTF";
break;
case 22:return "CLEAR";
break;
case 23:return "GETCH";
break;
case 24:return "JAVA";
break;
case 25:return "NUMERAL";
break;
case 26:return "PLUS";
break;
case 27:return "MINUS";
break;
case 28:return "TIMES";
break;
case 29:return "POW";
break;
case 30:return "MOD";
break;
case 31:return "LPAREN"
break;
case 32:return "RPAREN";
break;
case 33:return "LBRACE";
break;
case 34:return "RBRACE";
break;
case 35:return "LBRACKET";
break;
case 36:return "RBRACKET";
break;
case 37:return "COLON";
break;
case 38:return "SEMI";
break;
case 39:return "COMMA";
break;
case 40:return "DOT";
break;
case 41:return "EQEQ";
break;
case 42:return "EQUAL";
break;
case 43:return "NEQ";
break;
case 44:return "GREATER_EQ";
break;
case 45:return "SMALLER_EQ";
break;
case 46:return "GREATER";
break;
case 47:return "SMALLER";
break;
case 48:return "AND";
break;
case 49:return "OR";
break;
case 50:return "NOT";
break;
case 51:return "AMP";
break;
case 52:return "DECIMAL";
break;
case 53:return "INTEGER";
break;
case 54:return "ID";
break;
case 55:/* ignore */
break;
case 56:/* ignore */
break;
case 57:return "DIVIDE";
break;
case 58:
									string = "";
									this.pushState("STRING");
								
break;
case 59:
									char = "";
									this.pushState("CHAR");
								
break;
case 60:return "EOF";
break;
case 61:
									console.log(`Error lexico: ${yy_.yytext}`);
									return "INVALID";
								
break;
case 62:
									yy_.yytext = string;
									this.popState();
									return "STRING";
								
break;
case 63:string += yy_.yytext; format.push("%d");
break;
case 64:string += yy_.yytext; format.push("%c");
break;
case 65:string += yy_.yytext; format.push("%f");
break;
case 66:string += yy_.yytext;
break;
case 67:string += "\\t";
break;
case 68:string += "\\n";
break;
case 69:string += "\\\"";
break;
case 70:string += "\\\\";
break;
case 71:string += "%";
break;
case 72:
									yy_.yytext = char;
									this.popState();
									return "CHAR";
								
break;
case 73:char += yy_.yytext;
break;
case 74:char += "\\t";
break;
case 75:char += "\\n";
break;
case 76:char += "\\\'";
break;
case 77:char += "\\\\";
break;
}
},
rules: [/^(?:(%%PROGRAMA\b))/,/^(?:(include\b))/,/^(?:(void\b))/,/^(?:(main\b))/,/^(?:(int\b))/,/^(?:(char\b))/,/^(?:(float\b))/,/^(?:(arreglo\b))/,/^(?:(const\b))/,/^(?:(if\b))/,/^(?:(else\b))/,/^(?:(switch\b))/,/^(?:(case\b))/,/^(?:(break\b))/,/^(?:(default\b))/,/^(?:(for\b))/,/^(?:(while\b))/,/^(?:(do\b))/,/^(?:(continue\b))/,/^(?:(PY\b))/,/^(?:(scanf\b))/,/^(?:(printf\b))/,/^(?:(clrscr\b))/,/^(?:(getch\b))/,/^(?:(JAVA\b))/,/^(?:(#))/,/^(?:(\+))/,/^(?:(-))/,/^(?:(\*))/,/^(?:(\^))/,/^(?:(%))/,/^(?:(\())/,/^(?:(\)))/,/^(?:(\{))/,/^(?:(\}))/,/^(?:(\[))/,/^(?:(\]))/,/^(?:(:))/,/^(?:(;))/,/^(?:(,))/,/^(?:(\.))/,/^(?:(==))/,/^(?:(=))/,/^(?:(!=))/,/^(?:(>=))/,/^(?:(<=))/,/^(?:(>))/,/^(?:(<))/,/^(?:(&&))/,/^(?:(\|\|))/,/^(?:(!))/,/^(?:(&))/,/^(?:(([1-9][0-9]+|[0-9])\.[0-9]+))/,/^(?:([1-9][0-9]+|[0-9]))/,/^(?:([a-zA-Z_]\w*))/,/^(?:((\r|\n|\r\n)|[ \t\f]))/,/^(?:((\/\/[^\r\n]*)|(\/\*(([^*]|\*+[^/*])*)\*+\/)))/,/^(?:(\/))/,/^(?:(["]))/,/^(?:([']))/,/^(?:$)/,/^(?:.)/,/^(?:(["]))/,/^(?:%d[^\n\r\"\\%]*)/,/^(?:%c[^\n\r\"\\%]*)/,/^(?:%f[^\n\r\"\\%]*)/,/^(?:[^\n\r\"\\%]+)/,/^(?:\\t)/,/^(?:\\n)/,/^(?:\\")/,/^(?:\\)/,/^(?:%)/,/^(?:([']))/,/^(?:[^\n\r\'\\]+)/,/^(?:\\t)/,/^(?:\\n)/,/^(?:\\')/,/^(?:\\)/],
conditions: {"CHAR":{"rules":[72,73,74,75,76,77],"inclusive":true},"STRING":{"rules":[62,63,64,65,66,67,68,69,70,71],"inclusive":true},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = program;
exports.Parser = program.Parser;
exports.parse = function () { return program.parse.apply(program, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}